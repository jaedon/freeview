/*
 * Copyright (c) 2007 Strategy and Technology Limited. All Rights Reserved.
 *
 * Copyright in the whole and every part of this file belongs to
 * Strategy and Technology Limited ("the Owner") and may not be used,
 * sold, supplied, transferred, copied, reproduced in whole or in part,
 * in any manner or form or in or on any media for the benefit of any person
 * other than in accordance with the terms of the Owner's agreement or
 * otherwise without the prior written consent of the Owner.
 *
 */
#if !defined ITK_AVSTREAM_H__
#define ITK_AVSTREAM_H__
/**
 * @file
 * AVStream Interface
 */
#include "itk_types.h"

/**
 * @defgroup avstream Audio/Video Stream
 * @{
 *
 */
struct itk_avstream_t;

/**
 * Events generated by media objects. Note that some events are only generated for certain stream types,
 * as indicated by the comments for individual events.
 */
typedef enum itk_media_event_t
{
    ITK_MEDIA_PRELOAD = 0, /**< Stream has been located and is ready for presentation. Event Data - preloadData */
    ITK_MEDIA_PLAYING,     /**< Stream has started presentation. Event Data - NULL */
    ITK_MEDIA_STOPPED,     /**< Stream presentation has been stopped. Event Data - playedTime, if stream played using itk_display_t::newNativeAvstream(), otherwise NULL */
    ITK_MEDIA_TRIGGER,     /**< Stream has reached a preset trigger position. Event Data - trigger */
					       /**< Shall only be generated for streams that have timeline information such as Interaction Channel & DVR Streams */
    ITK_MEDIA_STALLED,     /**< Stream playout stalled for reasons such as buffer underflow. Event data - NULL */
					       /**< Shall be generated for IC, local storage streams or local storage streams played using itk_display_t::newNativeAvstream() */
    ITK_MEDIA_RESUMED,     /**< Stream playout resumed after a stall. Event Data - NULL */
					       /**< Used in connection with ITK_MEDIA_STALLED */

    ITK_MEDIA_USER_STOP,   /**< Stream was stopped by the user before the end of the stream. Event Data - playedTime */
					       /**< Applies to streams played using itk_display_t::newNativeAvstream() */

    ITK_MEDIA_EVENT        /**< No Longer Used. Host does not need to generate this event */
} itk_media_event_t;

/**
 * Deprecated: Container for data associated with avstream event ITK_MEDIA_EVENT
 */
typedef struct itk_media_stream_event_t
{
    char *eventName;            	/**< stream event name */
    itk_uint16_t id;                /**< event id */
    itk_uint16_t version;           /**< event version */
} itk_media_stream_event_t;

/**
 * Error codes for AVStream event ITK_MEDIA_PRELOAD
 */
typedef enum itk_preload_error_t
{
    ITK_MEDIA_NOT_FOUND,        /**< Specified Content Not Found. Applies To:[Broadcast, DVR, IC] */
    ITK_MEDIA_NOT_ALLOWED,      /**< Access Authorization Error. Applies To:[DVR, IC], Freesat only */
    ITK_MEDIA_INDEX_ERROR,      /**< Stream Timeline Index File Error. Applies To:[IC], Freesat only */
    ITK_MEDIA_KEY_ERROR,        /**< Decryption Key Error. Applies To:[IC] */
	ITK_MEDIA_TLS_ERROR,		/**< TLS certificate verification error. Certificate manager could not verify */
						        /**< IC stream server TLS certificate. On generation of this event, */
								/**< the engine may load another certificate in certificate manager */
								/**< and retry the preload. */
    ITK_MEDIA_DSMCC_REF_ERROR   /**< A reference to a DSM-CC Stream object is not found. Applies To:[Broadcast] */
                                /**< Internal only, not to be used by Host. */ 
} itk_preload_error_t;

/**
 * Buffer priority
 */
typedef enum itk_media_buffer_priority_t
{
    ITK_MEDIA_BUFFER_PRIMARY,
    ITK_MEDIA_BUFFER_SECONDARY
} itk_media_buffer_priority_t;
/**
 * Event data for AVStream event ITK_MEDIA_PRELOAD
 */
typedef struct itk_media_preload_t
{
	itk_present_t               result;         /**< The result. */
                                                /** If ITK_PRESENT the stream has loaded and the resultData is the streamLength .*/
                                                /** If ITK_NOT_PRESENT the stream has not loaded and the resultData is the error code */
    union
    {
	    itk_preload_error_t     error;          /**< The error if a preload failed. */
	    itk_int32_t             streamLength;   /**< Total length of the stream, if preload was successful and result is set to ITK_PRESENT. */
                                                /** Applicable to IC streams only, for all other stream set to -1. */
                                                /** The stream length unit varies and is described in the iTK User Guide, section Referenced streams. */
    }resultData;
}itk_media_preload_t;

/*
 * This UNION contains return data associated with certain stream events.
 * The host shall only set the member that corresponds to the event being generated.  
 */
typedef union itk_media_event_data_t
{
    itk_media_preload_t		 preloadData;	    /**< ITK_MEDIA_PRELOAD Event Data:  */
    itk_int32_t				 trigger;   	    /**< ITK_MEDIA_TRIGGER Event Data: The identifier of the trigger that caused the callback */
    itk_int32_t				 playedTime;        /**< ITK_MEDIA_STOPPED Event Data: Total playout time, excluding pauses, in seconds */
    itk_media_stream_event_t stream;			/**< ITK_MEDIA_EVENT Event Data: No longer Used */
} itk_media_event_data_t;

/**
 * Prototype for an AVStream callback function.
 *
 * @param[in] context The context given when the callback was registered
 * @param[in] avs The AVStream object that generated the callback
 * @param[in] ev The event type
 * @param[in] data The data corresponding to event ev. For some events this is can be NULL. See the event description above.
 */
typedef void (*itk_avstream_callback_t)(void *context, struct itk_avstream_t *avs,
                                        itk_media_event_t ev, itk_media_event_data_t *data);

/**
 * Selection for presenting video when the stream is stopped
 */
typedef enum itk_media_termination_t
{
    ITK_MEDIA_BLANK = 0, /**< Video is blanked */
    ITK_MEDIA_KEEP       /**< The last presentable frame is kept displayed */
} itk_media_termination_t;

/**
 * AVStream jump table
 */
typedef struct itk_avstream_t
{
    /**
     * Releases an AVStream
     *
     * Releasing a stream *does not* stop presentation of the media. It indicates
     * that the client no longer wishes to affect which audio and video streams
     * are presented to the viewer.
     *
     * @param[in] thiz The AVStream
     */
    void (*release)(struct itk_avstream_t *thiz);

    /**
     * Preloads an AVStream
     *
     * Preloading causes the host to put the stream in a suitable state for "immediate"
     * presentation. This may mean connecting to a media server and buffering the stream
     * or dereferencing the stream reference to a stream object. When the preload is
     * complete the host will generate an ITK_MEDIA_PRELOAD event with preloadData set
     * in itk_media_event_data_t union.
     *
     * @param[in] thiz The AVStream
     */
    void (*preload)(struct itk_avstream_t *thiz);

    /**
     * Starts presentation of an AVStream
     *
     * Starting up presentation is asynchronous. The player must call the listener
     * callback function with an ITK_MEDIA_PLAYING message when the presentation starts,
     * i.e. video or audio is being presented.
     *
     * Presentation begins from the current playback marker (the beginning of the
     * media content for a new player). For continuous media this has no meaning.
     *
     * @param[in] thiz The AVStream
     */
    void (*play)(struct itk_avstream_t *thiz);

    /**
     * Stops presentation of a media object.
     *
     * Stopping presentation is asynchronous. The player must call the listener
     * callback function with ITK_MEDIA_STOPPED message when the presentation stops.
     *
     * Stopping an object does *not* reset the playback cursor or loop counter.
     * The host must store the last position and continue presentation following
	 * a subsequent call to itk_avstream_t::play().
     *
     * @param[in] thiz The AVStream
     */
    void (*stop)(struct itk_avstream_t *thiz);

    /**
     * Indicates how the player is to handle termination of video presentation.
     *
     * The possible solutions are to blank the video (term = ITK_MEDIA_BLANK) or to
     * keep the last "presentable" frame on display (term = ITK_MEDIA_KEEP).
     * The default termination behaviour is to blank.
     *
     * @param[in] thiz The AVStream
     * @param[in] term Control
     */
    void (*setTerminationMode)(struct itk_avstream_t *thiz, itk_media_termination_t term);

    /**
     * Selects the audio component to play from the media. A component value of '-1' indicates
     * the default component. For audio this will be dependent on the chosen user language.
     *
     * An AVStream can have only one active audio component. If the AVStream has a selected
     * component already then this is replaced by the new component.
     *
     * If the AVStream is running then the change of component is effective immediately.
     *
     * @param[in] thiz The AVStream
     * @param[in] component Audio component to select
     */
    void (*selectAudioComponent)(struct itk_avstream_t *thiz, itk_int32_t component);

    /**
     * Selects the video component to play from the media. A component value of '-1' indicates
     * the default component. For video there is often only a single component.
     *
     * An AVStream can have only one active video component. If the AVStream has a selected
     * component already then this is replaced by the new component.
     *
     * If the AVStream is running then the change of component is effective immediately.
     *
     * @param[in] thiz The AVStream
     * @param[in] component Video component to select
     */
    void (*selectVideoComponent)(struct itk_avstream_t *thiz, itk_int32_t component);

    /**
     * Deselects the audio component to play from the media. No audio component is 
     * selected in its place.
     *
     * If the AVStream is running then the change of component is effective immediately.
     *
     * @param[in] thiz The AVStream
     */
    void (*deselectAudioComponent)(struct itk_avstream_t *thiz);

    /**
     * Deselects the video component to play from the media. No video component is 
     * selected in its place.
     *
     * If the AVStream is running then the change of component is effective immediately.
     *
     * @param[in] thiz The AVStream
     */
    void (*deselectVideoComponent)(struct itk_avstream_t *thiz);

    /**
     * Sets the playback speed for the stream
     *
     * The default playback speed is 1/1. The speed can be changed when the media
     * is playing and when it is stopped. Speeds other than 1/1 and 0/1 (pause)
     * are not supported by broadcast streams.
     *
     * @param[in] thiz The AVStream
     * @param[in] numerator Numerator
     * @param[in] denominator Denominator
     */
    void (*setSpeed)(struct itk_avstream_t *thiz,
                     itk_int32_t numerator, 
                     itk_int32_t denominator);

    /**
     * Sets a trigger to generate an event at a specified point in the presentation
     * of a stream.
	 * For details refer to the iTK User Guide, section Referenced streams.
     *
     * @note The call is not supported for all media types.
     *
     * @param[in] thiz The AVStream
     * @param[in] trigger      Unique trigger ID
     * @param[in] triggerValue Trigger position
     */
    void (*setTrigger)(struct itk_avstream_t *thiz, 
                       itk_int32_t trigger, 
                       itk_int32_t triggerValue);

    /**
     * Clears a trigger defined for a stream.
	 * For details refer to the iTK User Guide, section Referenced streams.
     *
     * @note The call is not supported for all media types.
     *
     * @param[in] thiz The AVStream
     * @param[in] trigger Trigger identifier
     */
    void (*clearTrigger)(struct itk_avstream_t *thiz, itk_int32_t trigger);

    /**
     * Sets the playback position so that playback commences from this position.
	 * For details refer to the iTK User Guide, section Referenced streams.
	 * This function must be executed so that its effect appears synchronous.
	 * The call does not need to block until presentation has reached the new position,
	 * but subsequent calls to itk_avstream_t::getPosition() must reflect the last selected position.
     *
     * @note The call is not supported for all media types.
     *
     * @param[in] thiz The AVStream
     * @param[in] position Context specific playback position identification
     */
    void (*setPosition)(struct itk_avstream_t *thiz, itk_int32_t position);

    /**
     * Sets the position to play to in a stream. When the position is reached, 
	 * presentation stops and the host generates an ITK_MEDIA_STOPPED event.
	 * For details refer to the iTK User Guide, section Referenced streams.
     *
     * @note The call is not supported for all media types.
     *
     * @param[in] thiz The AVStream
     * @param[in] endPosition Context specific playback end position identification
     */
    void (*setEndPosition)(struct itk_avstream_t *thiz, itk_int32_t endPosition);

    /**
     * Gets the playback position of a stream.
	 * For details refer to the iTK User Guide, section Referenced streams.
     *
     * @note The call is not supported for all media types.
     *
     * @param[in] thiz The AVStream
     *
     * @return Context specific current playback position identification
     */
    itk_int32_t (*getPosition)(struct itk_avstream_t *thiz);
} itk_avstream_t;
/**
 * @}
 */

#endif
