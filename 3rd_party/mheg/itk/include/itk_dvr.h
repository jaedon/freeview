/*
 * Copyright (c) 2009 Strategy and Technology Limited. All Rights Reserved.
 *
 * Copyright in the whole and every part of this file belongs to
 * Strategy and Technology Limited ("the Owner") and may not be used,
 * sold, supplied, transferred, copied, reproduced in whole or in part,
 * in any manner or form or in or on any media for the benefit of any person
 * other than in accordance with the terms of the Owner's agreement or
 * otherwise without the prior written consent of the Owner.
 *
 */
#if !defined ITK_DVR_H__
#define ITK_DVR_H__
/**
 * @file
 * DVR Interface
 */
#include "itk_types.h"

/**
 * Callback registered with DVR interface. 
 * The function is invoked to request a carousel associated with
 * an event being recorded is downloaded. 
 * @param context The pointer passed to setDownloadCallbacks.
 * @param id The booking identifier and path to store files.
 * @param serviceIndex The index of service carrying the carousel.
 * @param carouselId The id of carousel to download.
 * @param totalSize of carousel or 0 if unknown.
 * @remark The carousel will be stored using the itk_nvs_fs_t 
 * interface.  An NVS file system will be created using the
 * id string to create the source and path strings.
 */
typedef itk_errcode_t (*dvr_load_start_t)( void *context,
                const char *id, itk_int32_t serviceIndex, 
                itk_uint32_t carouselId, size_t totalSize );            
//NOTE: 
//Is a callback mechansim required to notify when a carousel 
//download has completed or failed OR is it sufficient that the
//files exist if download completed or will not exist if failed.
//Would it make sense to pass the raw data broadcast descriptor
//instead of carousel id and size.  This descriptor is delivered
//via EIT for freesat profile.  I am not sure how other profiles
//do this, if they do at all


/**Callback registered with DVR interface and invoked to request
 * a carousel download is aborted.
 * @param context The pointer passed to setDownloadCallbacks.
 * @param id The booking identifier and path to store files.
 */
typedef itk_errcode_t (*dvr_load_stop_t)(void *context, const char *id);

/** 
 * Codes for events generated by the DVR
 */
typedef enum itk_dvr_event_t
{
    ITK_DVR_EV_BOOKINGS = 0,        /**< Sent when the list of bookings has changed for any reason;
                                     * e.g. a new booking has been added, a booking has been cancelled,
                                     * a booking has been recorded, etc. 
                                     */
    ITK_DVR_EV_READY                /**< Indicates if the ready state has changed, e.g. an external storage
                                     * device has been inserted/removed
                                     */

} itk_dvr_event_t;

/** Callback registered with DVR interface and invoked when specific
 * DVR events occur.
 * @param context The pointer passed to setEventCallback.
 * @param ev The event code for the event that has occurred.
 */
typedef void (*itk_dvr_event_callback_t)( void *context, itk_dvr_event_t ev );

/**
 * Result codes for booking manipulations. These are used so that the
 * API remains profile agnostic and apply to adding, removing and moving
 * bookings.
 */
typedef enum itk_dvr_result_t
{
    ITK_DVR_RESULT_ADDED = 1,         /**< Booking successfully added */
    ITK_DVR_RESULT_ADDED_ALTERNATE,   /**< Booking successfully added using alternate showing */
    ITK_DVR_RESULT_CONFLICTED,        /**< Booking conflicted with existing booking(s) */
    ITK_DVR_RESULT_NOT_FOUND,         /**< Booking crid could not be found */
    ITK_DVR_RESULT_ALREADY_BOOKED,    /**< Booking already exists */
    ITK_DVR_RESULT_USER_CANCELLED,    /**< Process was cancelled by the user */
    ITK_DVR_RESULT_FAILED,            /**< Booking change failed for unspecified reason */
    ITK_DVR_RESULT_OUT_OF_SPACE,      /**< Insufficient resources to record booking */
    ITK_DVR_RESULT_TOO_MANY_BOOKINGS, /**< Cannot add any further bookings, too many exist already */
    ITK_DVR_RESULT_REMOVED,           /**< Booking successfully removed */
    ITK_DVR_RESULT_RECORDING,         /**< Booked event is currently being recorded */
    ITK_DVR_RESULT_ALREADY_RECORDED,  /**< Booked event has already been recorded */
    ITK_DVR_RESULT_MOVED              /**< Booked event has been moved successfully */
} itk_dvr_result_t;

/**Interface to DVR.
 */
typedef struct itk_dvr_t
{
    /**
     * Sets the callback functions that the DVR can use to start or stop
     * the download of a linked carousel.
     * @param thiz The DVR interface.
     * @param start Start download function pointer.
     * @param stop The stop download function pointer.
     * @param context A context pointer to pass in the callbacks.
     */
    itk_errcode_t (*setDownloadCallbacks)(struct itk_dvr_t *thiz,
                dvr_load_start_t start, dvr_load_stop_t stop, void *context);
    
    /**
     * Removes callbacks.
     * @param thiz The DVR interface
     */
    void (*removeDownloadCallbacks)( struct itk_dvr_t *thiz );

    /**
     * Returns a list of all current bookingIds.
     * The returned string should persist until released by freeString
     * @param thiz The DVR interface.
     * @remark The format of the booking id list is dependant on
     * the profile. See iTK User Guide for more information.
     */
    const char *(*getBookingList)( struct itk_dvr_t *thiz );

    /**
     * Creates a new booking.
     * @param thiz The DVR interface
     * @param bookingId String identifier for booking.
     * @param bookingData String defining the bookings properties.
     * @return A profile independent result code
     * @remark The format of the booking id and data is dependant on
     * the profile. See iTK User Guide for more information.
     */
    itk_dvr_result_t (*makeBooking)( struct itk_dvr_t *thiz, 
                const char *bookingId, const char *bookingData );

    /**
     * Returns the booking data associated with a bookingId.
     * The returned string should persist until released by freeString.
     * @param thiz The DVR interface.
     * @remark The format of the booking data string is profile specific.
     * See iTK user guide for more information.
     */
    const char *(*getBookingData)( struct itk_dvr_t *thiz, const char *bookingId );

    /**
     * Cancels an existing booking.
     * @param thiz The DVR interface
     * @param bookingId String identifier for the booking.
     * @return A profile independent result code.
     * @remark The format of the booking id is dependant on
     * the profile. See iTK User Guide for more information.
     */
    itk_dvr_result_t (*cancelBooking)( struct itk_dvr_t *thiz, const char *bookingId );

    /**
     * Returns a space seperated list of all recorded content.
     * The returned string should persist until released by freeString.
     * @param thiz The DVR interface.
     * @remark The list should be arranged in the order that content 
     * was recorded with the oldest content first.
     */
    const char *(*getContentList)( struct itk_dvr_t *thiz );

    /**
     * Returns the content info associated with a contentRef.
     * The returned string should persist until released by freeString.
     * @param thiz The DVR interface.
     * @remark The format of the content info string is profile specific.  
     * See iTK User Guide for more information.
     */
    const char *(*getContentInfo)( struct itk_dvr_t *thiz, const char *contentRef );

    /**
     * Moves content to given destination.
     * @param thiz The DVR interface.
     * @param contentRef The content ref of the content to move.
     * @param dest A string identifiying the destination.
     * @remark The format of the destination string is profile specific.  
     * See iTK User Guide for more information.
     * @return A profile independent result code
     */
    itk_dvr_result_t (*moveContent)( struct itk_dvr_t *thiz, const char *contentRef, const char *dest );

    /**
     * Frees a booking list, booking data, content list or content info string.
     * @param thiz The DVR interface
     * @param idDataString The string to be released.
     * @remark Strings that require freeing are those returned from getBookingList 
     * getBookingData, getContentList and getContentInfo.
     */
    void (*freeString)( struct itk_dvr_t *thiz, const char *idDataString );

    /**
     * Sets the callback to be invoked when PVR events occur, such as a change to the
     * current list of bookings.
     * @param thiz The DVR interface
     * @param callback The callback function to invoke
     * @param context A context pointer to pass to the callback.
     */
    void (*addEventCallback)( struct itk_dvr_t *thiz, itk_dvr_event_callback_t callback, void *context );

    /**
     * Removes any callback that has been set for PVR events.
     */
    void (*removeEventCallback)( struct itk_dvr_t *thiz );

    /**
     * Indicates if the DVR interface is ready for use. 
     * This value may change over time. For example, if the receiver uses an external storage
     * device then the DVR interface is only available if the storage devices is connected.
     * @param thiz The DVR interface.
     */
    itk_present_t (*ready)( struct itk_dvr_t *thiz );
} itk_dvr_t;


#endif/*ITK_DVR_H__*/
