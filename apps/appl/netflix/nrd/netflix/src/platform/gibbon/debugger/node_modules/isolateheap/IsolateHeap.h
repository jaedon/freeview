/*
 * (c) 1997-2015 Netflix, Inc.  All content herein is protected by
 * U.S. copyright and other applicable intellectual property laws and
 * may not be copied without the express permission of Netflix, Inc.,
 * which reserves all rights.  Reuse of any of this content for any
 * purpose without the permission of Netflix, Inc. is strictly
 * prohibited.
 */

#ifndef ISOLATEHEAP_H
#define ISOLATEHEAP_H

#include <node.h>
#include <node_object_wrap.h>
#include <string>
#include <vector>
#include <map>

class IsolateThread;

class IsolateHeap : public node::ObjectWrap
{
public:
    static IsolateHeap* instance() { return inst; }

    static void init(v8::Handle<v8::Object> target);

    static void snapshot(const v8::FunctionCallbackInfo<v8::Value>& args);
    static void serialize(const v8::FunctionCallbackInfo<v8::Value>& args);
    static void deserialize(const v8::FunctionCallbackInfo<v8::Value>& args);
    static void consoleLog(const v8::FunctionCallbackInfo<v8::Value>& args);
    static void consoleError(const v8::FunctionCallbackInfo<v8::Value>& args);
    static void callLater(const v8::FunctionCallbackInfo<v8::Value>& args);
    static void notify(const v8::FunctionCallbackInfo<v8::Value>& args);

    void notifyCallback(const std::string& fn);

private:
    IsolateHeap();
    ~IsolateHeap();

    static void New(const v8::FunctionCallbackInfo<v8::Value>& args);
    static void run(const v8::FunctionCallbackInfo<v8::Value>& args);
    static void isRunning(const v8::FunctionCallbackInfo<v8::Value>& args);
    static void call(const v8::FunctionCallbackInfo<v8::Value>& args);

private:
    static v8::UniquePersistent<v8::FunctionTemplate> constructor;
    struct Data
    {
        std::string type, name;
        std::map<std::string, std::pair<std::string, std::string> > object;
        v8::Persistent<v8::Value, v8::CopyablePersistentTraits<v8::Value> > persistent;
    };
    static IsolateHeap* inst;
    static std::map<std::string, Data> serialized;
    IsolateThread* thread;
    v8::Persistent<v8::Function> callback;
};

#endif
