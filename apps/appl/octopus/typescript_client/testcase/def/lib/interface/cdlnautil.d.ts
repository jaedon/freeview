/// <reference path="../../../def/node.d.ts" />
import tdata = require('./tdata');
import dbusConn = require('../util/dbus_connect');
declare class CDlnaUtil extends dbusConn.CDBusInterface {
    constructor();
    public StartDMPEvent(aCb: (msgInt: number, msgStr: string, param1: number, param2: number) => void): void;
    public StartDMREvent(aCb: (msgInt: number, msgStr: string, param1: number, param2: number) => void): void;
    public StartDMSEvent(aCb: (msgInt: number, msgStr: string, param1: number, param2: number) => void): void;
    public StartDIALEvent(aCb: (msgInt: number, msgStr: string, param1: number, param2: number) => void): void;
    public StartWSEvent(aCb: (msgInt: number, msgStr: string, param1: number, param2: number) => void): void;
    public StartSATIPEvent(aCb: (msgInt: number, msgStr: string, param1: number, param2: number) => void): void;
    public StartDLNARUISEvent(aCb: (msgInt: number, msgStr: string, param1: number, param2: number) => void): void;
    public StartOBAMAEvent(aCb: (msgInt: number, msgStr: string, param1: number, param2: number) => void): void;
    public DMP_Start(aCb: () => void): void;
    public DMP_Stop(aCb: () => void): void;
    public DMP_GetListOfDMS(aCb: (aServerDeviceList: tdata.TDMSInfo[]) => void): void;
    public DMP_BrowsingChildItem(aUdn: string, aCid: string, aSort: string, aStartIndex: number, aRequest: number, aCb: () => void): void;
    public DMP_SearchingItem(aUdn: string, aCid: string, aCategory: string, aKeyword: string, aSort: string, aStartIndex: number, aRequest: number, aRequestId: number, aCb: () => void): void;
    public DMP_SearchingAll(aCid: string, aCategory: string, aKeyword: string, aSort: string, aRequest: number, aCb: () => void): void;
    public DMP_GetRecordDestinations(aUdn: string, aCb: () => void): void;
    public DMP_GetRecordDiskInfo(aUdn: string, aID: string, aCb: () => void): void;
    public DMP_RemoveItem(aUdn: string, aID: string, aCb: (aRetval: string) => void): void;
    public DMP_GetIsIPDubbing(aCb: (aRetval: number) => void): void;
    public DMP_RefreshDms(aUdn: string, aCb: () => void): void;
    public DMR_Start(aFriendlyName: string, aCb: () => void): void;
    public DMR_Stop(aCb: () => void): void;
    public DMR_GetDefaultFriendlyName(aCb: (aFriendlyName: string) => void): void;
    public DMR_SetFriendlyName(aFriendlyName: string, aCb: () => void): void;
    public DMR_SetBringInUri(aUrl: string, aCb: () => void): void;
    public DMR_SetOperationMode(aMode: number, aCb: () => void): void;
    public DMS_Start(aFriendlyName: string, aBootTimeStart: number, aCb: () => void): void;
    public DMS_Stop(aCb: () => void): void;
    public DMS_GetDefaultFriendlyName(aCb: (aFriendlyName: string) => void): void;
    public DMS_SetFriendlyName(aFriendlyName: string, aCb: () => void): void;
    public DIAL_Start(aFriendlyName: string, aCb: () => void): void;
    public DIAL_Stop(aCb: () => void): void;
    public DIAL_SetFriendlyName(aFriendlyName: string, aCb: () => void): void;
    public DIAL_AppRegist(aApp: string, aCb: () => void): void;
    public DIAL_AppUnregist(aApp: string, aCb: () => void): void;
    public DIAL_SetAppState(aApp: string, aState: number, aCb: () => void): void;
    public WOONSERVER_Start(aFriendlyName: string, aCb: () => void): void;
    public WOONSERVER_Stop(aCb: () => void): void;
    public WOONSERVER_GetDefaultFriendlyName(aCb: (aFriendlyName: string) => void): void;
    public WOONSERVER_SetFriendlyName(aFriendlyName: string, aCb: () => void): void;
    public WOONSERVER_TestConnection(aCb: () => void): void;
    public SATIP_Start(aFriendlyName: string, aCb: () => void): void;
    public SATIP_Stop(aCb: () => void): void;
    public SATIP_GetDefaultFriendlyName(aCb: (aFriendlyName: string) => void): void;
    public SATIP_SetFriendlyName(aFriendlyName: string, aCb: () => void): void;
    public DLNARUIS_SendMessage(aDeviceHandle: number, aReqHandle: number, aHeader: number[], aMessage: number[], aCb: () => void): void;
    public DLNARUIS_SendMulticast(aDeviceHandle: number, aEventLevel: number, aNotifCEHTML: number[], aFriendlyName: string, aProfileList: number[], aCb: () => void): void;
    public DLNARUIS_SendErrorCode(aDeviceHandle: number, aReqHandle: number, aError: number, aCb: () => void): void;
    public LiveStream_Start(aTranscode: number, aSvcHandle: number, aProfileID: number, aIsPcrTsPacketInsert: number, aSource: number, aOutput: number, aCb: () => void): void;
    public LiveStream_Stop(aHandle: number, aCb: () => void): void;
    public LiveStream_ItemindexByProfile(aProfileName: string, aCb: (aIndex: number) => void): void;
    public LiveStream_Status(aHandle: number, aType: number, aCb: (aTranscode: number, aRating: number) => void): void;
}
export = CDlnaUtil;
