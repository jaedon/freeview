/// <reference path="../../../def/node.d.ts" />
import tdata = require('./tdata');
import dbusConn = require('../util/dbus_connect');
declare class CMediaPlay extends dbusConn.CDBusInterface {
    constructor();
    public StartEvent(aCb: (msgInt: number, msgStr: string, param1: number, param2: number, param3: number) => void): void;
    public GetViewNumber(aCb: (aViewNum: number) => void): void;
    public SetMainViewId(aViewId: number, aCb: () => void): void;
    public GetMainViewId(aCb: (aViewId: number) => void): void;
    public GetPlayType(aViewId: number, aCb: (aPlayType: number) => void): void;
    public GetNeedRadioBg(aViewId: number, aCb: (aIsNeed: number) => void): void;
    public GetSessionId(aViewId: number, aCb: (aSessionId: number) => void): void;
    public GetRequestId(aViewId: number, aPlaytype: number, aCb: (aRequestId: number) => void): void;
    public GetStreamAspectRatio(aViewId: number, aCb: (aAspectRatio: number) => void): void;
    public GetMhegDisplayPoint(aViewId: number, aRefWidth: number, aRefHeight: number, aVideoPointX: number, aVideoPointY: number, aCb: (aScaledSizeW: number, aScaledSizeH: number) => void): void;
    public StartAudioClip(aRequestId: number, aBuffer: ArrayBuffer, aBufferBytes: number, aAudioCodec: number, aLoopCount: number, aCb: () => void): void;
    public PauseAudioClip(aRequestId: number, aCb: () => void): void;
    public ResumeAudioClip(aRequestId: number, aCb: () => void): void;
    public StopAudioClip(aRequestId: number, aCb: () => void): void;
    public SetVideoFreeze(aViewId: number, aFreeze: number, aCb: () => void): void;
    public SetAudioFreeze(aViewId: number, aFreeze: number, aCb: () => void): void;
    public SetComponentIndex(aViewId: number, aCompType: number, aCompIndex: number, aCb: () => void): void;
    public GetComponentNum(aViewId: number, aCompType: number, aCb: (aCompCount: number) => void): void;
    public GetComponentIndex(aViewId: number, aCompType: number, aCb: (aCompIndex: number) => void): void;
    public StartLive(aViewId: number, aStartInfo: tdata.TStartInfoLive, aCb: (aSessionId: number) => void): void;
    public StartPvrPb(aViewId: number, aStartInfo: tdata.TStartInfoPvrPb, aCb: (aSessionId: number) => void): void;
    public StartTsrPb(aViewId: number, aStartInfo: tdata.TStartInfoTsrPb, aCb: (aSessionId: number) => void): void;
    public StartMedia(aViewId: number, aStartInfo: tdata.TStartInfoMediaPlay, aCb: (aSessionId: number) => void): void;
    public Stop(aViewId: number, aCb: () => void): void;
    public SetPlaySpeed(aViewId: number, aSpeed: number, aCb: () => void): void;
    public SetPlayPosition(aViewId: number, aPosition: number, aCb: () => void): void;
    public GetPlaySpeed(aViewId: number, aCb: (aSpeed: number) => void): void;
    public GetPlayPosition(aViewId: number, aCb: (aPosition: number) => void): void;
    public GetPlayState(aViewId: number, aCb: (aState: number) => void): void;
    public GetPlayError(aViewId: number, aCb: (aError: number) => void): void;
    public GetBufferedTime(aViewId: number, aCb: (aBufferred: number) => void): void;
    public GetDurationTime(aViewId: number, aCb: (aDurationTime: number) => void): void;
    public GetTsrStartTime(aViewId: number, aCb: (aTstStartTime: number) => void): void;
    public GetSupportedSpeeds(aViewId: number, aMaxNumSpeed: number, aCb: (aSpeedList: ArrayBuffer) => void): void;
    public GetTrickRestrictMode(aViewId: number, aCb: (aTrickRestrictMode: number) => void): void;
    public GetVideoSize(aViewId: number, aCb: (aVideoSize: ArrayBuffer) => void): void;
    public SetVideoSize(aViewId: number, aStartX: number, aStartY: number, aWidth: number, aHeight: number, aCb: () => void): void;
    public ResetVideoSize(aViewId: number, aCb: () => void): void;
    public SetPigRect(aViewId: number, aZOrder: number, aIsX: number, aIsY: number, aIW: number, aIH: number, aOrX: number, aOrY: number, aOW: number, aOH: number, aOsdAspectRatio: number, aDFC: number, aPigAspectRatio: number, aCb: () => void): void;
    public SetTSREnable(aEnable: number, aCb: () => void): void;
    public SetSubtitleEnable(aViewId: number, aEnable: number, aCb: () => void): void;
    public SetVideoHide(aViewId: number, aHide: number, aCb: () => void): void;
    public GetTSREnable(aCb: (aEnable: number) => void): void;
    public GetSubtitleEnable(aViewId: number, aCb: (aEnable: number) => void): void;
    public GetEventInfo(aViewId: number, aCb: (aData: ArrayBuffer) => void): void;
    public SaveThumbnail(aViewId: number, aFilename: string, aWidth: number, aHeight: number, aCb: () => void): void;
    public GetMajorChannel(aViewId: number, aCb: (aMajorCHNum: number) => void): void;
    public CheckPlayChangable(aViewId: number, aPlayType: number, aStartInfo: ArrayBuffer, aCb: (aChangable: number) => void): void;
    public GetViewState(aViewId: number, aCb: (aViewState: number) => void): void;
    public GetLockState(aViewId: number, aCb: (aLockState: number) => void): void;
    public MemorizeMediaState(aViewId: number, aStopMedia: number, aCb: () => void): void;
    public RestoreMediaState(aViewId: number, aCb: () => void): void;
    public GetThumbnail(aViewId: number, aPos: number, aCaptureTime: number, aCb: () => void): void;
    public GetURI(aViewId: number, aCb: (aUri: string) => void): void;
    public Probe(aViewId: number, aUri: string, aCb: () => void): void;
    public SetSubtitleSyncTime(aViewId: number, aSubtitleSyncTime: number, aCb: () => void): void;
    public SetSubtitleFontSize(aViewId: number, aSubtitleFontSize: number, aCb: () => void): void;
    public SetSubtitleTextPosition(aViewId: number, aSubtitleTextPosition: number, aCb: () => void): void;
    public GetSubtitleSyncTime(aViewId: number, aCb: (aSubtitleSyncTime: number) => void): void;
    public GetSubtitleFontSize(aViewId: number, aCb: (aSubtitleFontSize: number) => void): void;
    public GetSubtitleTextPosition(aViewId: number, aCb: (aSubtitleTextPosition: number) => void): void;
    public GetSubtitleStatus(aViewId: number, aCb: (aStatusInfo: ArrayBuffer) => void): void;
    public SetBufferingScenario(aViewId: number, aIsAuto: number, aThreshold: number, aCb: () => void): void;
    public GetBufferingChunkInfo(aViewId: number, aCb: (aChunkCount: number, aStartOffsets: ArrayBuffer, aEndOffsets: ArrayBuffer) => void): void;
    public GetBufferingRemainedTime(aViewId: number, aCb: (aBufferRemaindTime: number) => void): void;
    public GetBufferingPercent(aViewId: number, aCb: (aBufferPercent: number) => void): void;
    public GetBufferState(aViewId: number, aCb: (aBufferState: number) => void): void;
    public SetDrmLicenseData(aViewId: number, aData: ArrayBuffer, aCb: () => void): void;
    public SetBrowserUserAgentData(aViewId: number, aUAData: ArrayBuffer, aCb: () => void): void;
    public GetResourceMap(aCb: (aResourceMap: ArrayBuffer) => void): void;
    public GetPumpIndex(aViewId: number, aCb: (aPumpId: number) => void): void;
    public SetDuration(aViewId: number, aDuration: number, aCb: () => void): void;
    public SetPlayReadyInfo(aViewId: number, aLaURL: string, aCustomData: ArrayBuffer, aControlFlag: number, aCb: () => void): void;
    public GetVmxIdentifier(aCb: (aIdentifier: ArrayBuffer) => void): void;
    public GetVmxStatus(aViewId: number, aCb: (aStatus: number) => void): void;
    public GetVmxError(aViewId: number, aCb: (aErrorCode: number) => void): void;
    public SetVmxCas(aViewId: number, aVCASUrl: string, aVendorName: string, aCb: () => void): void;
    public UnsetVmxCas(aViewId: number, aCb: () => void): void;
}
export = CMediaPlay;
