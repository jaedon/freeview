/// <reference path="../../../def/node.d.ts" />
import tdata = require('./tdata');
import dbusConn = require('../util/dbus_connect');
declare class CMetaQuery extends dbusConn.CDBusInterface {
    constructor();
    public StartEvent(aCb: (msgInt: number, msgStr: string, param1: number, param2: number, param3: number) => void): void;
    public NewQuery(aField: string, aComparision: string, aValue: string, aCb: (aQueryHandle: number) => void): void;
    public DeleteQuery(aQueryHandle: number, aCb: () => void): void;
    public CloneQuery(aQueryHandle: number, aCb: (aNewHandle: number) => void): void;
    public And(aQueryHandle1: number, aQueryHandle2: number, aCb: (aNewHandle: number) => void): void;
    public Or(aQueryHandle1: number, aQueryHandle2: number, aCb: (aNewHandle: number) => void): void;
    public Not(aQueryHandle: number, aCb: (aNewHandle: number) => void): void;
    public New(aTarget: number, aCb: (aMetaQHandle: number) => void): void;
    public Delete(aMetaQHandle: number, aCb: () => void): void;
    public SetQuery(aMetaQHandle: number, aQueryHandle: number, aCb: () => void): void;
    public GetQuery(aMetaQHandle: number, aCb: (aQueryHandle: number) => void): void;
    public AddSvcConstraint_uid(aMetaQHandle: number, aSvcUid: number, aCb: () => void): void;
    public AddSvcConstraint_tripleid(aMetaQHandle: number, aOnid: number, aTsid: number, aSvcid: number, aCb: () => void): void;
    public ClearSvcConstraint(aMetaQHandle: number, aCb: () => void): void;
    public OrderBy(aMetaQHandle: number, aField: string, aAscending: number, aCb: () => void): void;
    public SetFilter(aMetaQHandle: number, aFilter: number, aCb: () => void): void;
    public Search(aMetaQHandle: number, aDirect: number, aCb: () => void): void;
    public Abort(aMetaQHandle: number, aCb: () => void): void;
    public Result(aMetaQHandle: number, aCb: (aResultList: tdata.TEvent[]) => void): void;
    public GetEvent_uid(aType: number, aSvcUid: number, aCb: (aEventInfo: tdata.TEvent) => void): void;
    public GetEvent_tripleid(aType: number, aOnid: number, aTsid: number, aSvcid: number, aCb: (aEventInfo: tdata.TEvent) => void): void;
    public GetEventWithIds_uid(aSvcUid: number, aEventid: number, aCb: (aEventInfo: tdata.TEvent) => void): void;
    public GetEventWithIds_tripleid(aOnid: number, aTsid: number, aSvcid: number, aEventid: number, aCb: (aEventInfo: tdata.TEvent) => void): void;
    public GetIpEvent_uid(aSvcUid: number, aEventid: number, aCb: (aEventInfo: tdata.TEvent) => void): void;
    public GetIpEvent_tripleid(aOnid: number, aTsid: number, aSvcid: number, aEventid: number, aCb: (aEventInfo: tdata.TEvent) => void): void;
    public GetPF_uid(aSvcUid: number, aCb: (aEventInfo: tdata.TEvent[]) => void): void;
    public GetPF_tripleid(aOnid: number, aTsid: number, aSvcid: number, aCb: (aEventInfo: tdata.TEvent[]) => void): void;
    public SetIpEvent(aUid: number, aData: ArrayBuffer, aCb: () => void): void;
    public ResetIpEvent(aUid: number, aCb: () => void): void;
    public ResetIpEventTable(aCb: () => void): void;
    public DeletIpEventByEndTime(aEndtime: number, aCb: () => void): void;
    public SetIpSvc(aUid: number, aData: ArrayBuffer, aCb: () => void): void;
    public ResetIpSvc(aUid: number, aCb: () => void): void;
    public ResetIpSvcTable(aCb: () => void): void;
    public SetIpLogo(aUid: number, aData: ArrayBuffer, aCb: () => void): void;
    public ResetIpLogo(aUid: number, aCb: () => void): void;
    public ResetIpLogoTable(aCb: () => void): void;
    public SyncIpEventTable(aCb: () => void): void;
    public SyncIpSvcTable(aCb: () => void): void;
    public SyncIpLogoTable(aCb: () => void): void;
    public ResetTVTVEventTable(aCb: () => void): void;
    public ResetTVTVSvcTable(aCb: () => void): void;
    public SyncTVTVSvcTable(aCb: () => void): void;
}
export = CMetaQuery;
