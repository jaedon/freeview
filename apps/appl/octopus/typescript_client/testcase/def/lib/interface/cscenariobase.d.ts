/// <reference path="../../../def/node.d.ts" />
import dbusConn = require('../util/dbus_connect');
declare class CScenarioBase extends dbusConn.CDBusInterface {
    constructor();
    public GetMainLanguage(aCb: (aLanguage: string) => void): void;
    public SetMainLanguage(aLanguage: string, aCb: () => void): void;
    public GetAudioLanguage(aIndex: number, aCb: (aLanguage: string) => void): void;
    public SetAudioLanguage(aIndex: number, aLanguage: string, aCb: () => void): void;
    public GetSubtitleLanguage(aIndex: number, aCb: (aLanguage: string) => void): void;
    public SetSubtitleLanguage(aIndex: number, aLanguage: string, aCb: () => void): void;
    public GetHardOfHearing(aCb: (aEnable: number) => void): void;
    public SetHardOfHearing(aEnable: number, aCb: () => void): void;
    public GetMaturityRating(aCb: (aRating: number) => void): void;
    public SetMaturityRating(aRating: number, aCb: () => void): void;
    public GetCountryCode(aCb: (aCountryCode: number) => void): void;
    public SetCountryCode(aCountryCode: number, aCb: () => void): void;
    public GetOperatorType(aCb: (aOpType: number) => void): void;
    public SetOperatorType(aOpType: number, aCb: () => void): void;
    public GetAntennaConnection(aCb: (aConnectionType: number) => void): void;
    public SetAntennaConnection(aConnectionType: number, aCb: () => void): void;
    public GetStartPadding(aCb: (aPadding: number) => void): void;
    public SetStartPadding(aPadding: number, aCb: () => void): void;
    public GetEndPadding(aCb: (aPadding: number) => void): void;
    public SetEndPadding(aPadding: number, aCb: () => void): void;
    public GetAutoDelete(aCb: (aAutoDelete: number) => void): void;
    public SetAutoDelete(aAutoDelete: number, aCb: () => void): void;
    public GetPostCode(aCb: (aPostcode: string) => void): void;
    public SetPostCode(aPostcode: string, aCb: () => void): void;
    public GetGMTOffset(aCb: (aGmtOffset: number) => void): void;
    public SetGMTOffset(aGmtOffset: number, aCb: () => void): void;
    public GetChannelSetupPIN(aCb: (aEnable: number) => void): void;
    public SetChannelSetupPIN(aEnable: number, aCb: () => void): void;
    public GetGuidancePolicy(aCb: (aGuidancePolicy: number) => void): void;
    public SetGuidancePolicy(aGuidancePolicy: number, aCb: () => void): void;
    public GetSubtitleSetting(aCb: (aEnable: number) => void): void;
    public SetSubtitleSetting(aEnable: number, aCb: () => void): void;
    public GetDayLightSaving(aCb: (aEnable: number) => void): void;
    public SetDayLightSaving(aEnable: number, aCb: () => void): void;
    public GetTimeUpdate(aCb: (aEnable: number) => void): void;
    public SetTimeUpdate(aEnable: number, aCb: () => void): void;
    public GetBouquetName(aCb: (aBouquet: string) => void): void;
    public SetBouquetName(aBouquet: string, aCb: () => void): void;
    public GetBouquetID(aCb: (aBouquetId: number) => void): void;
    public SetBouquetID(aBouquetId: number, aCb: () => void): void;
    public GetSIMode(aCb: (aSIMode: number) => void): void;
    public SetSIMode(aSIMode: number, aCb: () => void): void;
    public GetRegionCode(aCb: (aRegionCode: number) => void): void;
    public SetRegionCode(aRegionCode: number, aCb: () => void): void;
    public GetAdultChannels(aCb: (aAdultChannel: number) => void): void;
    public SetAdultChannels(aAdultChannel: number, aCb: () => void): void;
    public GetSWUpdateVersion(aCb: (aSwUpdateVersion: string) => void): void;
    public SetSatRecReceiverId(aReceiverId: number, aCb: () => void): void;
    public GetTVTVEnable(aCb: (aEnable: number) => void): void;
    public SetTVTVEnable(aEnable: number, aCb: () => void): void;
    public GetTVTVEPGDownload_StandbyEnable(aCb: (aEnable: number) => void): void;
    public SetTVTVEPGDownload_StandbyEnable(aEnable: number, aCb: () => void): void;
    public GetDescrambleOnOff(aCb: (aEnable: number) => void): void;
    public SetDescrambleOnOff(aEnable: number, aCb: () => void): void;
}
export = CScenarioBase;
