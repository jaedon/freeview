#ifndef __DI_NETWORK_H___
#define __DI_NETWORK_H___

#define HOST_NAME_SIZE		32
#define IP_STRING_SIZE		16

#define IF_NAME_SIZE		16
#define MAC_ADDR_LEN		6
#define IPV4_ADDR_LEN		4
#define IPV6_ADDR_LEN		16

typedef enum
{
	DI_NETWORK_DEV_LAN = 0,
	DI_NETWORK_DEV_WAN,
	DI_NETWORK_DEV_CABLEMODEM,
	DI_NETWORK_DEV_WIFI,
	DI_NETWORK_DEV_PPPOE,
	DI_NETWORK_DEV_MAX
} DI_NETWORK_DEV_TYPE_e;

typedef enum
{
	DI_NETWORK_IP_VER_4 = 0,
	DI_NETWORK_IP_VER_6
} DI_NETWORK_IP_VER_e;

typedef enum
{
	DI_NETWORK_EVENT_CABLE_CONNECT = 0,
	DI_NETWORK_EVENT_CABLE_DISCONNECT,
	DI_NETWORK_EVENT_DHCP_SUCCESS,
	DI_NETWORK_EVENT_DHCP_FAIL,
	DI_NETWORK_EVENT_DHCP6_SUCCESS,
	DI_NETWORK_EVENT_DHCP6_FAIL,
	DI_NETWORK_EVENT_AUTOIP_SUCCESS,
	DI_NETWORK_EVENT_AUTOIP_FAIL,
	DI_NETWORK_EVENT_MAX
} DI_NETWORK_EVENT_e;

typedef struct
{
	HUINT8 aucIpAddr[IPV4_ADDR_LEN];
	HUINT8 aucBcastAddr[IPV4_ADDR_LEN];
	HUINT8 aucMaskAddr[IPV4_ADDR_LEN];
} DI_NETWORK_IPV4_ADDR_t;

typedef enum
{
	DI_NETWORK_IPV6_ADDR_GLOBAL	= 0x0000U,
	DI_NETWORK_IPV6_ADDR_LOOPBACK	= 0x0010U,
	DI_NETWORK_IPV6_ADDR_LINKLOCAL	= 0x0020U,
	DI_NETWORK_IPV6_ADDR_SITELOCAL	= 0x0040U,
	DI_NETWORK_IPV6_ADDR_COMPATv4	= 0x0080U
} DI_NETWORK_IPV6_ADDR_SCOPE_e;

typedef enum
{
	DI_NETWORK_IPV6_ADDR_ADD = 0,
	DI_NETWORK_IPV6_ADDR_DEL
} DI_NETWORK_IPV6_ADDR_OP_e;

typedef enum
{
	DI_NETWORK_IPV6_DHCP_STATELESS = 0,
	DI_NETWORK_IPV6_DHCP_STATEFUL
} DI_NETWORK_IPV6_DHCP_MODE_e;

typedef enum
{
	DI_NETWORK_ADD_ROUTE = 0,
	DI_NETWORK_DELETE_ROUTE
} DI_NETWORK_ROUTE_OP_MODE_e;

typedef struct
{
	HUINT8 aucIpAddr[IPV6_ADDR_LEN];
	HUINT32 ulPrefix;
	DI_NETWORK_IPV6_ADDR_SCOPE_e eScope;
} DI_NETWORK_IPV6_ADDR_t;

typedef struct
{
	HUINT8 szName[IF_NAME_SIZE];
	DI_NETWORK_DEV_TYPE_e eDevType;
	HUINT8 aucMacAddr[MAC_ADDR_LEN];
	HBOOL bIsUp;
	HBOOL bIsConnected;
	HBOOL bIsDynamic;
	DI_NETWORK_IPV4_ADDR_t stIpv4Addr;
	DI_NETWORK_IPV6_ADDR_t stIpv6Addr;
} DI_NETWORK_GET_INFO_t;

typedef struct
{
	HUINT32 ulBytesSend;
	HUINT32 ulBytesReceive;
	HUINT32 ulPacketsSend;
	HUINT32 ulPacketsReceive;
} DI_NETWORK_DATA_AMOUNT_INFO_t;

typedef struct
{
	DI_NETWORK_IPV4_ADDR_t stIpv4Addr;
	DI_NETWORK_IPV6_ADDR_OP_e eIpv6AddrOp;
	DI_NETWORK_IPV6_ADDR_t stIpv6Addr;
} DI_NETWORK_SET_INFO_t;

typedef struct
{
	HUINT8 aucRouteAddr[IPV4_ADDR_LEN];
	HUINT32 ulMetric;
} DI_NETWORK_ROUTE_PARAMS_t;

typedef struct
{
	HCHAR cIfName[IF_NAME_SIZE];
	HUINT8 ucDestination[IPV4_ADDR_LEN];
	HUINT8 ucGateway[IPV4_ADDR_LEN];
	HUINT16 ulFlags;
	HUINT32 ulRefCnt;
	HUINT32 ulUse;
	HUINT32 ulMetric;
	HUINT8 ucMaskAddr[IPV4_ADDR_LEN];
	HUINT32 ulMtu;
	HUINT32 ulWindow;
	HUINT32 ulIrtt;
} DI_NETWORK_GET_ROUTE_INFO_t;

typedef struct
{
	DI_NETWORK_ROUTE_OP_MODE_e eRouteMode;
	HCHAR cIfName[IF_NAME_SIZE];
	HUINT8 ucDestination[IPV4_ADDR_LEN];
	HUINT8 ucGateway[IPV4_ADDR_LEN];
	HUINT8 ucMaskAddr[IPV4_ADDR_LEN];
	HUINT16 ulFlags;
	HUINT32 ulMetric;
	HUINT32 ulMtu;
	HUINT32 ulWindow;
	HUINT32 ulIrtt;
} DI_NETWORK_SET_ROUTE_INFO_t;

typedef struct
{
	HUINT32 ulWaitSeconds;
	HUINT32 ulWaitSecondsAfterFailure; /* Wait N seconds after failure (default 20) */
	HBOOL bUseVendorClass;			/* dhcp option 60 */
	HUINT8 aucVendorClass[128];
	DI_NETWORK_IPV6_DHCP_MODE_e eMode;

	HBOOL bUseHostName;
	HCHAR cHostName[HOST_NAME_SIZE];
	HBOOL bUseRequestIp;
	HCHAR cRequestIp[IP_STRING_SIZE];

} DI_NETWORK_DHCPC_PARAMS_t;

typedef struct
{
	HUINT8 aucStart[IPV4_ADDR_LEN];
	HUINT8 aucEnd[IPV4_ADDR_LEN];
	HUINT8 aucDns[3][IPV4_ADDR_LEN];
	HUINT8 aucSubnet[IPV4_ADDR_LEN];
	HUINT8 aucRouter[IPV4_ADDR_LEN];
	HUINT8 aucDomain[128];
	HUINT32 ulLease;

	HUINT8 aucIpv6Start[IPV6_ADDR_LEN];
	HUINT8 aucIpv6End[IPV6_ADDR_LEN];
	HUINT8 aucIpv6Dns[IPV6_ADDR_LEN];
	HUINT8 aucIpv6Subnet[IPV6_ADDR_LEN];
	HUINT32 ulIpv6Prefix;
} DI_NETWORK_DHCPS_PARAMS_t;

typedef struct
{
	HUINT8 aucAcsUrl[128];			/* dhcp option 43 */
	HUINT8 aucProvisioningCode[128];
	HUINT32 ulCWMPRetryMinWait;
	HUINT32 ulCWMPRetryIntervalMulti;
} DI_NETWORK_DHCP_OPTIONS_t;

typedef	struct
{
	HUINT32 ulDevId;
	DI_NETWORK_EVENT_e eEvent;
} DI_NETWORK_CALLBACK_DATA_t;

typedef void (*pfnDI_NETWORK_EVENT_CALLBACK)(void *pvData);

DI_ERR_CODE DI_NETWORK_GetDevCount(HUINT32 *pulCount);
DI_ERR_CODE DI_NETWORK_GetDevInfo(HUINT32 ulDevId, DI_NETWORK_GET_INFO_t *pstGetInfo);
DI_ERR_CODE DI_NETWORK_SetDevInfo(HUINT32 ulDevId, DI_NETWORK_SET_INFO_t *pstSetInfo);
DI_ERR_CODE DI_NETWORK_DevUp(HUINT32 ulDevId);
DI_ERR_CODE DI_NETWORK_DevDown(HUINT32 ulDevId);
DI_ERR_CODE DI_NETWORK_GetDnsCount(HUINT32 *pulIPv4Cnt, HUINT32 *pulnIPv6Cnt);
DI_ERR_CODE DI_NETWORK_GetDnsInfo(DI_NETWORK_IP_VER_e eVer, HUINT32 ulIdx, HUINT8 *pucDns);
DI_ERR_CODE DI_NETWORK_SetDnsInfo(HUINT32 ulIpv4Cnt, HUINT8 *pucIpv4DnsList, HUINT32 ulIpv6Cnt, HUINT8 *pucIpv6DnsList);
DI_ERR_CODE DI_NETWORK_GetDnsMode(DI_NETWORK_IP_VER_e eVer, HBOOL *pbIsUserSet);
DI_ERR_CODE DI_NETWORK_SetDnsMode(DI_NETWORK_IP_VER_e eVer, HBOOL bIsUserSet);
DI_ERR_CODE DI_NETWORK_GetDnsDomainName(HUINT32 *pulDomainCnt, HUINT8 *pucDomainList);
DI_ERR_CODE DI_NETWORK_GetDefaultRoute(HUINT32 ulDevId, DI_NETWORK_IP_VER_e eVer, HUINT8 *pucRouteAddr);
DI_ERR_CODE DI_NETWORK_SetDefaultRoute(HUINT32 ulDevId, DI_NETWORK_IP_VER_e eVer, HUINT8 *pucRouteAddr);
DI_ERR_CODE DI_NETWORK_GetDefaultRouteExt(HUINT32 ulDevId, DI_NETWORK_IP_VER_e eVer, DI_NETWORK_ROUTE_PARAMS_t *pstParams);
DI_ERR_CODE DI_NETWORK_SetDefaultRouteExt(HUINT32 ulDevId, DI_NETWORK_IP_VER_e eVer, DI_NETWORK_ROUTE_PARAMS_t *pstParams);
DI_ERR_CODE DI_NETWORK_DeleteDefaultRoute(HUINT32 ulDevId, DI_NETWORK_IP_VER_e eVer);
DI_ERR_CODE DI_NETWORK_GetRouteInfo(HUINT32 ulDevId, DI_NETWORK_IP_VER_e eVer, DI_NETWORK_GET_ROUTE_INFO_t *pRouteInfo);
DI_ERR_CODE DI_NETWORK_SetRouteInfo(HUINT32 ulDevId, DI_NETWORK_IP_VER_e eVer, DI_NETWORK_SET_ROUTE_INFO_t *pSetRoute);
DI_ERR_CODE DI_NETWORK_StartDhcpClient(HUINT32 ulDevId, DI_NETWORK_IP_VER_e eVer, DI_NETWORK_DHCPC_PARAMS_t *pstParams);
DI_ERR_CODE DI_NETWORK_StopDhcpClient(HUINT32 ulDevId, DI_NETWORK_IP_VER_e eVer);
DI_ERR_CODE DI_NETWORK_StartDhcpServer(HUINT32 ulDevId, DI_NETWORK_IP_VER_e eVer, DI_NETWORK_DHCPS_PARAMS_t *pstParams);
DI_ERR_CODE DI_NETWORK_StopDhcpServer(HUINT32 ulDevId, DI_NETWORK_IP_VER_e eVer);
DI_ERR_CODE DI_NETWORK_StartAutoIp(HUINT32 ulDevId);
DI_ERR_CODE DI_NETWORK_RegisterEventCallback(HUINT32 ulDevId, DI_NETWORK_EVENT_e eEvent, pfnDI_NETWORK_EVENT_CALLBACK pfnEventCallback);
DI_ERR_CODE DI_NETWORK_SetWakeOnLAN (HUINT32 ulDevId, HBOOL bOn_Off);
DI_ERR_CODE DI_NETWORK_SetPortForward(HUINT32 ulDevId, DI_NETWORK_IP_VER_e eVer);
DI_ERR_CODE DI_NETWORK_ClearPortForward(HUINT32 ulDevId, DI_NETWORK_IP_VER_e eVer);
DI_ERR_CODE DI_NETWORK_GetDevDataAmountInfo(HUINT32 ulDevId, DI_NETWORK_DATA_AMOUNT_INFO_t *pstGetStatus);
DI_ERR_CODE DI_NETWORK_GetDhcpOptions(HUINT32 ulDevId, DI_NETWORK_IP_VER_e eVer, DI_NETWORK_DHCP_OPTIONS_t *pstOptions);
DI_ERR_CODE DI_NETWORK_Init(void);

#endif /* __DI_NETWORK_H__ */

