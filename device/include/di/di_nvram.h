/* $Header: $ */
/****************************************************************************
* $Workfile:   di_nvram.h  $
* $Modtime:   Jul 30 2007 00:17:52  $
*
* Author:
* Description:
*
*                                 Copyright (c) 2008 HUMAX Co., Ltd.
*                                               All rights reserved.
*****************************************************************************/

#ifndef _DI_NVRAM_H_
#define _DI_NVRAM_H_

#include "htype.h"
#include "di_err.h"

/****************************************************************************
* Definitions
*****************************************************************************/


/****************************************************************************
* Typedef & const data
*****************************************************************************/
typedef enum
{
	DI_NVRAM_OSD_ON = 0,
	DI_NVRAM_OSD_OFF
}DI_NVRAM_OSD_DISPLAY_E;

typedef enum
{
	DI_NVRAM_FRONTPANEL_DISPLAY_ON = 0,
	DI_NVRAM_FRONTPANEL_DISPLAY_OFF
}DI_NVRAM_FRONTPANEL_DISPLAY_E;

typedef enum
{
	DI_NVRAM_ASPECT_RATIO_4_3 = 0,
	DI_NVRAM_ASPECT_RATIO_16_9
}DI_NVRAM_ASPECT_RATIO_E;

typedef enum
{
	DI_NVRAM_OTA_SSU = 1,
	DI_NVRAM_OTA_DTG = 2,
	DI_NVRAM_OTA_HUMAX = 3,
	DI_NVRAM_OTA_NORDIG = 4,
	DI_NVRAM_OTA_FILE = 5,
	DI_NVRAM_OTA_SKYD = 6,
	DI_NVRAM_OTA_MAX
}DI_NVRAM_OTA_TYPE_E;


typedef enum
{
	DI_NVRAM_OTA_CHANNEL_SAT		= 1,
	DI_NVRAM_OTA_CHANNEL_CAB		= 2,
	DI_NVRAM_OTA_CHANNEL_TER		= 3,
	DI_NVRAM_OTA_CHANNEL_FLASH		= 4,
	DI_NVRAM_OTA_CHANNEL_FTP		= 5
}DI_NVRAM_OTA_CHANNEL_E;

typedef enum
{
	DI_NVRAM_RESOLUTION_Unknown			=0x00000000,
	DI_NVRAM_RESOLUTION_720x240P		=0x00000001,
	DI_NVRAM_RESOLUTION_2880x240P		=0x00000002,
	DI_NVRAM_RESOLUTION_640x480P		=0x00000004,
	DI_NVRAM_RESOLUTION_720x480I		=0x00000008,
	DI_NVRAM_RESOLUTION_720x480P		=0x00000010,
	DI_NVRAM_RESOLUTION_1440x480P		=0x00000020,
	DI_NVRAM_RESOLUTION_2880x480I		=0x00000040,
	DI_NVRAM_RESOLUTION_2880x480P		=0x00000080,
	DI_NVRAM_RESOLUTION_720x288P		=0x00000100,
	DI_NVRAM_RESOLUTION_2880x288P 		=0x00000200,
	DI_NVRAM_RESOLUTION_720x576I		=0x00000400,
	DI_NVRAM_RESOLUTION_720x576P		=0x00000800,
	DI_NVRAM_RESOLUTION_1440x576P		=0x00001000,
	DI_NVRAM_RESOLUTION_2880x576I 		=0x00002000,
	DI_NVRAM_RESOLUTION_2880x576P		=0x00004000,
	DI_NVRAM_RESOLUTION_1080x720P		=0x00008000,
	DI_NVRAM_RESOLUTION_1280x720P		=0x00010000,
	DI_NVRAM_RESOLUTION_1920x1080I		=0x00020000,
	DI_NVRAM_RESOLUTION_1920x1080P		=0x00040000,
	DI_NVRAM_RESOLUTION_3840x2160P		=0x00080000,
	DI_NVRAM_RESOLUTION_DUMMY			=0x000FFFFF
} DI_NVRAM_VIDEO_RESOLUTION_E;

typedef enum
{
	DI_NVRAM_HDMI_FIELD_RATE_Unknown	=0x0000,
	DI_NVRAM_HDMI_FIELD_RATE_24HZ		=0x0001,
	DI_NVRAM_HDMI_FIELD_RATE_25HZ 		=0x0002,
	DI_NVRAM_HDMI_FIELD_RATE_30HZ 		=0x0004,
	DI_NVRAM_HDMI_FIELD_RATE_50HZ 		=0x0008,
	DI_NVRAM_HDMI_FIELD_RATE_60HZ 		=0x0010,
	DI_NVRAM_HDMI_FIELD_RATE_100HZ 		=0x0020,
	DI_NVRAM_HDMI_FIELD_RATE_120HZ 		=0x0040,
	DI_NVRAM_HDMI_FIELD_RATE_200HZ		=0x0080,
	DI_NVRAM_HDMI_FIELD_RATE_240HZ		=0x0100,
	DI_NVRAM_HDMI_FIELD_RATE_59_98HZ	=0x0120,
	DI_NVRAM_HDMI_FIELD_RATE_DUMMY		=0xFFFF
} DI_NVRAM_HDMI_VIDEO_FIELD_RATE_E;

typedef enum
{
	DI_NVRAM_HDMI_VIDEO_AR_eNoData = 0,
	DI_NVRAM_HDMI_VIDEO_AR_e4_3,
	DI_NVRAM_HDMI_VIDEO_AR_e16_9
}DI_NVRAM_HDMI_VIDEO_AR_E;


typedef enum
{
	DI_NVRAM_SCART_OUTPUT_CVBS=3,
	DI_NVRAM_SCART_OUTPUT_RGB,
	DI_NVRAM_SCART_OUTPUT_SVIDEO,

	DI_NVRAM_SCART_MAX
} DI_NVRAM_SCART_SETTING_VALUE;

typedef enum tagDI_NVRAM_FIELD
{
	DI_NVRAM_FIELD_SYSTEM_ID = 0,					// HUINT32				// 4				// System Id
	DI_NVRAM_FIELD_SFLASH,
	DI_NVRAM_FIELD_SERIAL_NO,
	DI_NVRAM_FIELD_MAC_ADDR,
	DI_NVRAM_FIELD_HDCP_KEY,
	DI_NVRAM_FIELD_DTCP_KEY,
	DI_NVRAM_FIELD_CI_PLUS_KEY,
	DI_NVRAM_FIELD_PARING_DATA,
	DI_NVRAM_FIELD_PRIVATE,
	DI_NVRAM_FIELD_CSC_KEY,
	DI_NVRAM_FIELD_CM_SERIAL_NO,
	DI_NVRAM_FIELD_CM_MAC_ADDR,
	DI_NVRAM_FIELD_CM_MAC_ADDR_ANOTHER,
	DI_NVRAM_FIELD_IRDETO_BBCB,
	DI_NVRAM_FIELD_IRDETO_UC_SECURE_ID,
	DI_NVRAM_FIELD_IRDETO_UC_PRIVATE_DATA,
	DI_NVRAM_FIELD_DSTB_ID,

	DI_NVRAM_FIELD_OTA_TYPE1 = 0x100,				// DI_NVRAM_OTA_TYPE_E
	DI_NVRAM_FIELD_OTA_TYPE2, 						// DI_NVRAM_OTA_TYPE_E
	DI_NVRAM_FIELD_OTA_TYPE3,						// DI_NVRAM_OTA_TYPE_E
	DI_NVRAM_FIELD_CH_TYPE1,						// DI_NVRAM_OTA_CHANNEL_E
	DI_NVRAM_FIELD_CH_TYPE2,						// DI_NVRAM_OTA_CHANNEL_E
	DI_NVRAM_FIELD_CH_TYPE3,						// DI_NVRAM_OTA_CHANNEL_E
	DI_NVRAM_FIELD_OTA_FLAG1,						// DI_NVRAM_OTA_FLAG_E
	DI_NVRAM_FIELD_OTA_FLAG2,						// DI_NVRAM_OTA_FLAG_E
	DI_NVRAM_FIELD_OTA_FLAG3,						// DI_NVRAM_OTA_FLAG_E
	DI_NVRAM_FIELD_TUNER_ID1,						// Tuner Id
	DI_NVRAM_FIELD_TUNER_ID2,						// Tuner Id
	DI_NVRAM_FIELD_TUNER_ID3,						// Tuner Id
	DI_NVRAM_FIELD_ANTENA_POWER1,					// External Antena Power for Ter, 0:Off/1:On
	DI_NVRAM_FIELD_ANTENA_POWER2,					// External Antena Power for Ter, 0:Off/1:On
	DI_NVRAM_FIELD_ANTENA_POWER3,					// External Antena Power for Ter, 0:Off/1:On
	DI_NVRAM_FIELD_ES_PID1,							// Element Stream PID for OTA
	DI_NVRAM_FIELD_ES_PID2,							// Element Stream PID for OTA
	DI_NVRAM_FIELD_ES_PID3,							// Element Stream PID for OTA
	DI_NVRAM_FIELD_TRANSACTION_ID1,					// Transaction Id for Nordic OTA
	DI_NVRAM_FIELD_TRANSACTION_ID2,					// Transaction Id for Nordic OTA
	DI_NVRAM_FIELD_TRANSACTION_ID3,					// Transaction Id for Nordic OTA
	DI_NVRAM_FIELD_CH_INFO_S,						// DI_CHANNEL_PARAM
	DI_NVRAM_FIELD_CH_INFO_T,						// DI_CHANNEL_PARAM
	DI_NVRAM_FIELD_CH_INFO_C,						// DI_CHANNEL_PARAM
	DI_NVRAM_FIELD_NET_PORTAL_IP,					// portal ip address
	DI_NVRAM_FIELD_NET_DOWN_PATH,					// Network Download Path
	DI_NVRAM_FIELD_NET_DEVICE_ID,					// ethernet device id 0 = eth0
	DI_NVRAM_FIELD_NET_IP_CONFIG,					// DHCP/Manual
	DI_NVRAM_FIELD_NET_IP_SETTING,					// Manual IP setting
	DI_NVRAM_FIELD_OTA_FTP_INFO,					// DI_NVRAM_FTP_OTA_SETTING_T
	DI_NVRAM_FIELD_FILE_SIZE,						// file size of backgrould ota

	DI_NVRAM_FIELD_LOADER_VERSION,					// Version number of boot Loader
	DI_NVRAM_FIELD_OTALDR_VERSION,					// Version number of ota boot Loader
	DI_NVRAM_FIELD_FACLDR_VERSION,					// Version number of factory loader
	DI_NVRAM_FIELD_APP_VERSION,						// Version number of Application
	DI_NVRAM_FIELD_APP_VERSION_NEXT,				// next app version for ota
	DI_NVRAM_FIELD_LOADER_VERSION_NEXT,				// next launcher loader version for ota
	DI_NVRAM_FIELD_OTALDR_VERSION_NEXT,				// next ota loader version

	DI_NVRAM_FIELD_LANGUAGE,						// OSD language code in ISO 639 code
	DI_NVRAM_FIELD_COUNTRY_CODE,					// HUINT8 a[3]
	DI_NVRAM_FIELD_TV_STANDARD,						// DI_VIDEO_SD_STANDARD
	DI_NVRAM_FIELD_SCART_RGB,						// DI_NVRAM_SCART_SETTING_VALUE
	DI_NVRAM_FIELD_HD_RESOULTION,					// DI_NVRAM_VIDEO_RESOLUTION_E
	DI_NVRAM_FIELD_FIELD_RATE,						// DI_NVRAM_HDMI_VIDEO_FIELD_RATE_E
	DI_NVRAM_FIELD_SD_STANDARD,						// VIDEO SD STANDARD
	DI_NVRAM_FIELD_OAD_VERSION,						// for MHEG ???
	DI_NVRAM_FIELD_RCU_CUSTOM_CODE,					// for RCU custom code
	DI_NVRAM_FIELD_RCU_CUSTOM_CODE2,				// for alternative RCU custom code
	DI_NVRAM_FIELD_PANEL_DISPLAY,					// DI_OTA_PANELDISPLAY_t
	DI_NVRAM_FIELD_PANEL_DIMMING,					// HUINT8
	DI_NVRAM_FIELD_OSD_DISPLAY,						// DI_NVRAM_OSD_DISPLAY_E
	DI_NVRAM_FIELD_START_BANK_FLAG,					// 두 개의 bank중 어디로 부팅 할 지 결정
	DI_NVRAM_FIELD_CHECK_USB,						// 부팅 시 USB 마운트해서 hdf를 검사할지 말지 결정
	DI_NVRAM_FIELD_CHECK_USB_COUNT,					// 위 동작 실패 시 몇 번 재 시도 할지 count를 저장
	DI_NVRAM_FIELD_ASPECT_RATIO,					// DI_NVRAM_ASPECT_RATIO_E
	DI_NVRAM_FIELD_USAGE_ID,						// for UPC OTA
	DI_NVRAM_FIELD_BIN8K,							// for eeprom emulation
	DI_NVRAM_FIELD_IRDETO_CPCB,						// for IRDETO CPCB
	DI_NVRAM_FIELD_IRDETO_CPCB_ENCRYPTED, 			// for IRDETO CPCB (encrypted)
	DI_NVRAM_FIELD_IRDETO_CA_PARTITION,				// for IRDETO CA PARTITION
	DI_NVRAM_FIELD_IRDETO_LOADER_PARTITION,			// for IRDETO LOADER PARTITION
	DI_NVRAM_FIELD_IRDETO_IR_PARTITION,				// for IRDETO IR PARTITION
	DI_NVRAM_FIELD_IRDETO_IR_BACKUP_PARTITION,		// for IRDETO IR PARTITION (back up)
	DI_NVRAM_FIELD_IRDETO_IR_CUSTOM,				// for IRDETO CUSTOM Partition
	DI_NVRAM_FIELD_DISPLAY_FACTORY_INFO,			// for display factory info
	DI_NVRAM_FIELD_FACTORY_GANG_WRITED,				//for factory gang writed
	DI_NVRAM_FIELD_KERNEL_SIZE,						// kernel size
	DI_NVRAM_FIELD_KERNEL_CRC,						// kernel CRC
	DI_NVRAM_FIELD_ROOTFS_SIZE,						// rootfs size
	DI_NVRAM_FIELD_ROOTFS_CRC,						// rootfs CRC
	DI_NVRAM_FIELD_GANG_CRC,						// gang CRC
	DI_NVRAM_FIELD_VA_EXTRA_DATA,					// for VIACESS data
	// Kevin : Do not add nvram field. You can use DI_NVRAM_Write/Read instaed of DI_NVRAM_SetField/GetField

	DI_NVRAM_FIELD_RAWFS = 0x1000,
	DI_NVRAM_FIELD_DUMMY = 0xFFFF
} DI_NVRAM_FIELD_T;

typedef enum
{
	DI_NVRAM_OTA_FLAG_NO_OTA			= 0x00,
	DI_NVRAM_OTA_FLAG_DETECTED			= 0x01,
	DI_NVRAM_OTA_FLAG_COMPLETED			= 0x02,
	DI_NVRAM_OTA_FLAG_FORCE_UPGRADE		= 0x04,
	DI_NVRAM_OTA_FLAG_NAGRA_RECOVERY	= 0x08,
	DI_NVRAM_OTA_FLAG_DOWNLOADING		= 0x10,
	DI_NVRAM_OTA_FLAG_WRITING			= 0x20,
	DI_NVRAM_OTA_FLAG_ERROR				= 0x80
} DI_NVRAM_OTA_FLAG_E;

typedef enum
{
	DI_NVRAM_OTA_NONE = 0,
	DI_NVRAM_OTA_FOR_NAND,
	DI_NVRAM_OTA_FOR_HDD
} DI_NVRAM_OTA_MODE;

#define NET_ADDR_LENGTH 4
typedef struct DI_NVRAM_NET_IP_SETTING_Tag
{
	HUINT8		ip[NET_ADDR_LENGTH];
	HUINT8		mask[NET_ADDR_LENGTH];
	HUINT8 		gateway[NET_ADDR_LENGTH];
	HUINT8		dns[NET_ADDR_LENGTH];
} DI_NVRAM_NET_IP_SETTING_T;

typedef enum
{
	DI_NVRAM_IP_DHCP = 0,
	DI_NVRAM_IP_MANUAL
} DI_NVRAM_NET_IP_CONFIG_E;


/****************************************************************************
* Global function prototypes
*****************************************************************************/

typedef enum DI_NVRAM_FS_PARTITION_e
{
	DI_NVRAM_FS_PARTITION_RO,
	DI_NVRAM_FS_PARTITION_RW,
	DI_NVRAM_FS_PARTITION_LOADER,
	DI_NVRAM_PARTITION_W_RAWFS,
	DI_NVRAM_PARTITION_MAX
} DI_NVRAM_FS_PARTITION_E;

DI_ERR_CODE DI_NVRAM_Write(DI_NVRAM_FS_PARTITION_E partition, HUINT8 *pFileName, HUINT32 offset, void *data, HINT32 nDataSize);
DI_ERR_CODE DI_NVRAM_Read(DI_NVRAM_FS_PARTITION_E partition, HUINT8 *pFileName, HUINT32 offset, void *data, HINT32 nDataSize);
DI_ERR_CODE DI_NVRAM_GetSize(DI_NVRAM_FS_PARTITION_E partition, HUINT8 *pFileName, HINT32 *pnDataSize);
DI_ERR_CODE DI_NVRAM_Remove(DI_NVRAM_FS_PARTITION_E partition, HUINT8 *pFileName);


DI_ERR_CODE DI_NVRAM_GetField(DI_NVRAM_FIELD_T field, HUINT32 offset, void *data, HINT32 nDataSize);
DI_ERR_CODE DI_NVRAM_SetField(DI_NVRAM_FIELD_T field, HUINT32 offset, void *data, HINT32 nDataSize);
DI_ERR_CODE DI_NVRAM_Reload(void);
DI_ERR_CODE	DI_NVRAM_CheckData(DI_NVRAM_FS_PARTITION_E partition, HBOOL *orgData, HBOOL *backData, HBOOL *blockCheck);
DI_ERR_CODE	DI_NVRAM_Init(void);
#endif	/* _DI_NVRAM_H_ */

