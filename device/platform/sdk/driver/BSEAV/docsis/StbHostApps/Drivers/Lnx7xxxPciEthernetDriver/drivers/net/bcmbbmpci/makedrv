#!/bin/bash
# File: drivers/net/bcmbcmpci/Makefile
#
# Makefile for the BCM7038 Enet driver
#
#
#  Copyright (c) 2006-2011 Broadcom Corporation
#
#  This program is the proprietary software of Broadcom Corporation and/or
#  its licensors, and may only be used, duplicated, modified or distributed
#  pursuant to the terms and conditions of a separate, written license
#  agreement executed between you and Broadcom (an "Authorized License").
#  Except as set forth in an Authorized License, Broadcom grants no license
#  (express or implied), right to use, or waiver of any kind with respect to
#  the Software, and Broadcom expressly reserves all rights in and to the
#  Software and all intellectual property rights therein.  IF YOU HAVE NO
#  AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY,
#  AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE
#  SOFTWARE.
#
#  Except as expressly set forth in the Authorized License,
#
#  1.     This program, including its structure, sequence and organization,
#  constitutes the valuable trade secrets of Broadcom, and you shall use all
#  reasonable efforts to protect the confidentiality thereof, and to use this
#  information only in connection with your use of Broadcom integrated circuit
#  products.
#
#  2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED
#  "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS
#  OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH
#  RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL
#  IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR
#  A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET
#  ENJOYMENT, QUIET POSSESSION OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME
#  THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
#
#  3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM
#  OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL,
#  INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY
#  RELATING TO YOUR USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM
#  HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN
#  EXCESS OF THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1,
#  WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY
#  FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.
#
#***************************************************************************
#
# $Id$
#
# mtd driver for OCAP partitions. The kernel provides a single mtd partition
# and this driver is handling the OCAP related subpartitions.
# Applies to 2.6.18-6.6 or later kernel
# 
#
#

function error {
   echo "************************************************"
   echo "*             Build failed!                    *"
   echo "************************************************"
   exit
}

function GiveHelp {
   echo "This script builds the network interface driver for 3255 or 7118."
   echo
   echo "Usage: makedrv [options...]"
   echo
   echo "Options:"
   echo "   chipid <pid> - make a network driver for a particular chip"
   echo "   verbose   - in verbose mode"
   echo
   echo "Examples:"
   echo "   makedrv chipid 7118            - make a 7118 SCB network driver"
   echo "   makedrv chipid 3255 verbose    - make a 3255 PCI network driver in verbose mode"
   exit
}

# Export all variables, so make will see them.
set -a

device=
makeopts=

# Add new parameters to one of these variables, depending on whether they
# should default to "0" or "1".
opt_0_params="verbose clean led fft"
opt_1_params="all"
opt_p_params="copt aopt chipid"

for i in ${opt_0_params} ${opt_p_params} ; do
   eval opt_${i}=0
done
for i in ${opt_1_params} ; do
   eval opt_${i}=1
done

while [ $# != 0 ] ; do
   parm=$1
   shift
   
   if [ $parm == help ] ; then
      GiveHelp
   fi

   for i in ${opt_0_params} ${opt_1_params} ; do
      if [ ${parm} == no${i} ] ; then
         eval opt_${i}=0
         continue 2
      fi
      if [ ${parm} == ${i} ] ; then
         eval opt_${i}=1
         continue 2
      fi
   done
   for i in ${opt_p_params} ; do
      if [ ${parm} == ${i} ] ; then
         if [ $# != 0 ] ; then
            eval opt_${i}=1
            eval opt_${i}_parm=$1
            shift
            continue 2
            break
         else
            echo "Error: Option $opt requires a value."
            exit
         fi
      fi
      if [ ${parm} == no${i} ] ; then
         eval opt_${i}=0
         continue 2
      fi
   done

   # If there's an "=" in the parameter, it's probably a make macro definition.
   if [ "${parm/=/}" != "${parm}" ] ; then
      makeopts="$makeopts $parm"
      continue
   fi

   if [ "${target}" != "" ] ; then
      echo "Error: Unexpected or unrecognized parameters: ${target} ${parm}"
      exit
   fi

done

if [ "${opt_copt}" == "1" ] ; then
   export COMPILER_OPTIONS="${opt_copt_parm}"
   echo "Using compiler options: ${opt_copt_parm}"
fi

if [ ${opt_chipid} == 0 ] ; then
   export CHIPID="3255"
   export DEVICE="pci"
   echo "Building for 3255"
   opt_chipid_parm=3255
else
   export CHIPID="${opt_chipid_parm}"
   echo "Building for ${opt_chipid_parm}"
   
   if [ ${opt_chipid_parm} == 3255 ]; then
      export DEVICE="pci"
   else
      export DEVICE="scb"
   fi
    
fi

if [ "${opt_aopt}" == "1" ] ; then
   export ASSEMBLER_OPTIONS="${opt_aopt_parm}"
   echo "Using compiler options: ${opt_aopt_parm}"
fi

# Set build variables which may be overridden by command-line options.
             VERBOSE=${opt_verbose}
             FFT_SUPPORT=${opt_fft}
             LED_SUPPORT=${opt_led}

# Turn on compile of the ocap flash access driver.
MTDOCAP_DRIVER=1

if [ ${opt_clean} == 1 ] ; then
   rm -f  *.o  *.mod.o  *.ko *.mod.c 
   cd ..
   if [ ${opt_all} == 1 ] ; then
      rm -f *.mod.c 
   fi
fi

let kernel_version=`cat ${LINUX}/include/generated/utsrelease.h |grep UTS_RELEASE | sed 's/\#define \([A-Z]\).* //g' | sed 's/-[0-9].*//g' | sed 's/[\",\.]//g'`;
let extra_version=`cat ${LINUX}/include/generated/utsrelease.h |grep UTS_RELEASE | sed 's/\#define \([A-Z]\).* //g' | sed 's/[0-9].*-//g' | sed 's/[\",\.]//g'`;
if [ ${kernel_version} -ge 2618 ]; then
    if [ ${extra_version} > 1 ]; then
	use_writesize=1;
	echo "USE_WRITESIZE ${USE_WRITE_SIZE}"
    fi
fi

echo " kernel version $kernel_version, extra version $extra_version" 

if [ ${opt_verbose} == 1 ] ; then
   make V=1 ${makeopts} -C $LINUX SUBDIRS=$PWD modules
else
   make ${makeopts} -C $LINUX SUBDIRS=$PWD modules
fi
  
echo

