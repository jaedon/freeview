# rules.bsp - makefile target rules
#
# DESCRIPTION
# This file contains rules used in building targets.
#
# VARIABLES
# The following variables must be defined (or not, as appropriate):
#
#     ROM_SIZE          number of bytes of ROM space as in config.h
#     LOCAL_MEM_SIZE	target RAM size as in config.h
#     BINHEX		binary->hex file conversion program
#     HEX_FLAGS         BINHEX program options
#     LD_LOW_FLAGS	ld(1) options for code in low memory
#     LD_HIGH_FLAGS	ld options for code in high memory
#     LD_PARTIAL_FLAGS  ld flags for linking partially complete objects
#     LDDEPS		host-specific dependencies prerequisite to linking
#     LDOUT_CONV	hpToBsd, coffToBsd, gswab, /bin/cat, etc.
#     COMPILE_SYMTBL	hide flags needed to get compiler to swallow symTbl.c
#     ROM_ENTRY		rom entry point (typically &romInit)
#     SYS_ENTRY		system entry point (typically &sysInit)
#     USR_ENTRY		compressed system entry point (typically &usrInit)
#
# The following variables are optionally defined:
#
#     LDFLAGS		standard ld flags for vxWorks & ROMs.
#     ROM_LDFLAGS	ld flags specific to ROM image
#     MACH_EXTRA	extra modules for all boot/vxWorks images
#     BOOT_EXTRA	extra modules for compressed images only
#     RELEASE		images made as part of WRS release step
#
# CONSTANTS
#     CPU               cpu type
#*/


################################################################################

clean   :
	- $(RM) *.o
	- $(RM) *.rpo
	- $(RM) Linux*
	- $(RM) bootrom*
	- $(RM) ctdt.c
	- $(RM) symTbl.c
	- $(RM) depend.$(TARGET_DIR)
	- $(RM) *.map
	- $(RM) *.a
	- $(RM) vxram.*

ifeq ($(BCM_VERBOSE),1)
   ECHO=
else
   ECHO=@
endif

ifeq ($(IMPLICIT_RULE_S_O),)
.s.o :
	@ $(RM) $@
	@ echo ==== Compiling $(notdir $<) \(in $(subst ../,,$(<D))\)	
	$(ECHO) $(CC) $(CFLAGS_AS) -c -o $@ $<
endif

ifeq ($(IMPLICIT_RULE_C_O),)
.c.o :
	@ $(RM) $@
	@ echo ==== Compiling $(notdir $<) \(in $(subst ../,,$(<D))\)	
	$(ECHO) $(CC) $(CFLAGS) -c $<
endif

.c.s :
	@ $(RM) $@
	@ echo ==== Compiling $(notdir $<) \(in $(subst ../,,$(<D))\)	
	$(ECHO) $(CC) $(CFLAGS) -S $<

.cpp.s :
	@ $(RM) $@
	@ echo ==== Compiling $(notdir $<) \(in $(subst ../,,$(<D))\)	
	$(ECHO) $(CXX) $(C++FLAGS) $(CFLAGS) -S $<

ifeq ($(IMPLICIT_RULE_CXX_O),)

# If we're building a slim image, zap MessageLog references.
ifeq ($(BCM_REDUCED_IMAGE_SIZE),1)
.cpp.o :
	@ $(RM) $@
	@ echo ==== Compiling $(notdir $<) \(in $(subst ../,,$(<D))\)	
	MessageLogZapper $<
	$(ECHO) $(CXX) $(C++FLAGS) -c $<.bak.cpp -o $@
	@ $(RM) $<.bak.cpp
else
.cpp.o :
	@ $(RM) $@
	@ echo ==== Compiling $(notdir $<) \(in $(subst ../,,$(<D))\)	
	$(ECHO) $(CXX) $(C++FLAGS) -c $<
endif

.cxx.o :
	@ $(RM) $@
	@ echo ==== Compiling $(subst \,/,$<)
	$(ECHO) $(CXX) $(C++FLAGS) -c $<

.cc.o :
	@ $(RM) $@
	@ echo ==== Compiling $(notdir $<) \(in $(subst ../,,$(<D))\)	
	$(ECHO) $(CXX) $(C++FLAGS) -c $<

# C++ compile and munch
.cpp.out :
	@ $(RM) $@
	$(CXX) $(C++FLAGS) -c $<
	@ $(RM) $@ ctdt.c
	$(NM) $*.o | $(MUNCH) > ctdt.c
	$(MAKE) CC_COMPILER="-fdollars-in-identifiers" ctdt.o
	$(LD_PARTIAL) -o $@ $*.o ctdt.o
	@ $(RM) ctdt.c ctdt.o

.cxx.out :
	@ $(RM) $@
	$(CXX) $(C++FLAGS) -c $<
	@ $(RM) $@ ctdt.c
	$(NM) $*.o | $(MUNCH) > ctdt.c
	$(MAKE) CC_COMPILER="-fdollars-in-identifiers" ctdt.o
	$(LD_PARTIAL) -o $@ $*.o ctdt.o
	@ $(RM) ctdt.c ctdt.o

.cc.out :
	@ $(RM) $@
	$(CXX) $(C++FLAGS) -c $<
	@ $(RM) $@ ctdt.c
	$(NM) $*.o | $(MUNCH) > ctdt.c
	$(MAKE) CC_COMPILER="-fdollars-in-identifiers" ctdt.o
	$(LD_PARTIAL) -o $@ $*.o ctdt.o
	@ $(RM) ctdt.c ctdt.o
endif


################################## Linux #####################################
#
# Linux     - normal Linux system
# Linux.sym - symbol table of Linux

# One disadvantage of doing a partial link is that link errors often show
# up with the wrong filenames and function names.  It's best to do a single
# link.  The time saved is negligible, but debugging is easier.

# To avoid having to do a partial link, we need to run "nm" and "munch" on the
# list of object files.  Unfortunately, the list is so large that the command
# line exceeds the DOS limit.  The alternative is to put the file names into
# a list file and reference that.  The filename variable (MACH_DEP) must be
# split so the sublists can be written individually.

# Pull out the first few files in the list.  These must remain first or the
# application will return to the bootloader early in initialization.
firstfiles  = $(foreach t, 1 2 3 4 5 6 7 8 9 10, $(word $(t), $(MACH_DEP)))

Linux Linux.sym : $(sort $(MACH_DEP)) # $(LDDEPS) # $(LIBS)
	- @ $(RM) Linux Linux.sym
	- @ $(RM) version.o
	@ echo ==== Full link -o Linux
	$(CXX) $(LDFLAGS) \
	    -o Linux $(MACH_DEP) $(LIBS) 2>&1

