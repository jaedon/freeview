#!/bin/bash

#---------------------------------------------------------------------------------#
# Script to make drivers for Nexus 
# then
# Copy driver libraries to the binaries directory in preparation for scons builds
#---------------------------------------------------------------------------------#

#---------------------------------------------------------------------------------#
# Utility to get the value of the parameter passed in $1 from the file passed in $2
# Intended for use with scons_Locals.py, primarily
function get_param_val()
{
if [ -f $2 ]
then
	PARAM_VAL=`grep -w $1 $2 | grep -v \# | cut -d\' -f2`
else
	echo "File $2 not found - quitting!"
	exit 1 # Exit with non-zero return code
fi
}
#---------------------------------------------------------------------------------#
 
#---------------------------------------------------------------------------------#
# Function to exit with error message passed in $@
function err_exit()
{
echo
echo \*********************************
echo \*
if [ $# -eq 0 ]
then
	echo "* $myname >> exiting"
else
	echo -e "* $myname >>" $@
	echo "* $myname >> exiting"
fi
echo \*
echo \*********************************
echo
exit 1 # Exit with non-zero return code
}
#---------------------------------------------------------------------------------#

#---------------------------------------------------------------------------------#
#
# Start of main section
#
#

myname=`basename $0`

echo "----"
echo "$myname >> starting"
echo


#
# Find out where the source directories start (this is ugly, but it works)
#
#

#pushd `dirname $0`/../../ > /dev/null # Assuming script is in tools
pushd `dirname $0` > /dev/null # Assuming script is in client root (with scons)
popd > /dev/null

CURR_DIR=`pwd`

# set curl library version
if [  -z $CURL_VER ] ; then
    CURL_VER=curl-7.21.2

    echo 
    echo "Use default CURL_VER = "${CURL_VER}
    echo
else
    echo 
    echo "CURL_VER = "${CURL_VER}
    echo
#    exit 1 # Exit with non-zero return code
fi

# set nexus directory
if [  -z $NEXUS ] ; then
    export NEXUS=$CURR_DIR/../../../../nexus
#    export
else
    echo 
    echo "NEXUS = "${NEXUS}
    echo
#    exit 1 # Exit with non-zero return code
fi

BASE_DIR=${NEXUS}/..
BIN_DIR=$CURR_DIR/../bin
LINUX_ROOT=/opt/brcm/linux-2.6.37-7425a0/7425a0
LINUX_INCLUDE=/opt/brcm/linux-2.6.37-7425a0/7425a0/include
#TOOLCHAIN_ROOT=/opt/toolchains/crosstools_hf-linux-2.6.18.0_gcc-4.2-11ts_uclibc-nptl-0.9.29-20070423_20090508/bin

cln_mk_f=${CURR_DIR}"/_CLEANED_DRVR_"
cln_nexusMgr_f=${CURR_DIR}"/_CLEANED_NEXUSMGR_"
cln_b_os_f=${CURR_DIR}"/_CLEANED_B_OS_"
cln_net_f=${CURR_DIR}"/_CLEANED_NET_"

#NEXUSMGR_LIBDIR=$CURR_DIR/nexusMgr/bin
#SC_PLATFORM=bcm935230nexus
#PLATFORM=935230
SC_BCM_NEXUS_LIBDIR=$NEXUS/bin

export BCHP_ENDIAN=le
export KERNELMODE_SETTOPAPI=y
export OS=linuxuser

#export NEXUS
#export NEXUSMGR_LIBDIR
export BIN_DIR
export CURR_DIR
export BASE_DIR
export SC_PLATFORM
export CINEMANOW_STAND_ALONE_APPLICATION=y
#export LINUX_ROOT
#export LINUX_INCLUDE
#export TOOLCHAIN_ROOT
export PLATFORM
export SC_BCM_NEXUS_LIBDIR

#echo "NEXUS = "$NEXUS
#echo "BIN_DIR = "$BIN_DIR
echo "BASE_DIR = "$BASE_DIR
#echo "CURR_DIR = "$CURR_DIR
#echo "PLATFORM = "$PLATFORM

# Prepend toolchain directory to path
# note this should be set in scons_Locals.py (TOOLCHAIN_ROOT)
# but if it's missing, use our old default
# (same as the default in SConstruct)
#
if [ ! -z $TOOLCHAIN_ROOT ] ; then
    export PATH=$TOOLCHAIN_ROOT:$PATH
else
    echo 
    echo "TOOLCHAIN_ROOT is not exported"
    echo
    exit 1 # Exit with non-zero return code
fi

# Path to Linux sources should be set in scons_Locals.py (LINUX_ROOT)
# but if it's missing, use our old default
# (same as the default in SConstruct)
#
if [ ! -z $LINUX_ROOT ] ; then
    export LINUX=$LINUX_ROOT
else
    echo 
    echo "LINUX_ROOT is not exported"
    echo
    exit 1 # Exit with non-zero return code
fi

# Path to Linux include should be set in scons_Locals.py (LINUX_INCLUDE)
# but if it's missing, use our old default
# (same as the default in SConstruct)
#
if [ ! -z $LINUX_INCLUDE ] ; then
    export LINUX_INC=$LINUX_INCLUDE
else
    echo 
    echo "LINUX_INCLUDE is not exported"
    echo
    exit 1 # Exit with non-zero return code
fi

if [ ! -z $APPLIBS_TOOLCHAIN_ARCH ] ; then
    echo "APPLIBS_TOOLCHAIN_ARCH = "$APPLIBS_TOOLCHAIN_ARCH
else
    echo 
    echo "APPLIBS_TOOLCHAIN_ARCH is not exported"

    export APPLIBS_TOOLCHAIN_ARCH=mipsel-linux
    echo "default: export APPLIBS_TOOLCHAIN_ARCH = "$APPLIBS_TOOLCHAIN_ARCH
    echo
#    exit 1 # Exit with non-zero return code
fi

if [ ! -z $ARCH ] ; then
    echo "ARCH = "$ARCH
else
    echo 
    echo "ARCH is not exported"

    export ARCH=mipsel-linux
    echo "default: export ARCH = "$ARCH
    echo
#    exit 1 # Exit with non-zero return code
fi

######################
# Using ASF, DRM, and WMAPRO requires access to restricted sources
# Therefore, these are turned off by default
# Certain features can turn them on as needed (NETFLIX and USE_ASF, for example)

#export ASF_SUPPORT=n
#export MEDIA_ASF_SUPPORT=n
#export MSDRM_PD_SUPPORT=n
#export RAP_WMAPRO_SUPPORT=n
######################

#export PLAYBACK_IP_SUPPORT=y
#export RAP_AVL_SUPPORT=y
#export RAP_AC3_SUPPORT=y
#export RAP_DDP_SUPPORT=y
#export RAP_DDP_TO_AC3_SUPPORT=y
#export RAP_MPEG_SUPPORT=y
#export RAP_WMA_SUPPORT=y
#export RAP_SRSHD_SUPPORT=y
#export RAP_SRSTRUVOL_SUPPORT=y
#export RAP_PL2_SUPPORT=y
#export MEDIA_AVI_SUPPORT=n
#export BUILD_SYSTEM=nexus
#export RAP_AACSBR_SUPPORT=y
#export RAD_EA_SUPPORT=y
#export SSL_SUPPORT=y
#export SMP=y
#export BINDIR="$BIN_DIR"
#export USERCMD_SUPPORT=y

#export DEBUG=n
#export PLATFORM=935230
#export BCHP_VER=C0

echo	"----"
echo "Building the drivers"
echo

#export NEXUS_DISPLAY_EXTENSION_INC=$NEXUS/extensions/interpolation/interpolation_ext.inc
export NEXUS_C_STD=c99

pushd $NEXUS > /dev/null
NEXUS_TOP=`pwd`
popd > /dev/null

pushd $NEXUS/build > /dev/null

if [ ! -f ${cln_mk_f} ]
then
	
        echo "----"
	echo "Starting \"make clean\" for drivers"
	echo
                
	if ! make clean; then err_exit "driver \"make clean\" failed"; fi
	echo "driver build cleaned on "`date` > ${cln_mk_f}
fi

export KEYLADDER_SUPPORT=n
export USERCMD_SUPPORT=n
export BHSM_KEYLADDER=OFF
export HSM_SOURCE_AVAILABLE=y
export NEXUS_EXTRALIBS=

#Install the prebuilt
mkdir -p $NEXUS/platforms/$PLATFORM/bin/linuxuser.mipsel-uclibc.release > /dev/null
mkdir -p $NEXUS/platforms/$PLATFORM/bin/linuxuser.mipsel-uclibc.debug > /dev/null
    

if ! make; then err_exit "driver \"make\" failed"; fi
echo	"----"
echo "driver build done"
echo

popd > /dev/null

echo	"----"
echo "Building the b_os lib"
echo

pushd $NEXUS/lib/os/ > /dev/null

if [ ! -f ${cln_b_os_f} ]
then
	
        echo "----"
        echo "Starting \"make clean\" for b_os"
        echo

        if ! make clean; then err_exit "b_os \"make clean\" failed"; fi
        echo "b_os build cleaned on "`date` > ${cln_b_os_f}
fi

if ! make; then err_exit "b_os \"make\" failed"; fi
echo	"----"
echo "b_os build done"
echo

popd > /dev/null

echo	"----"
echo "Building the nexusMgr"
echo

#echo " current location: "$CURR_DIR/../nexusMgr
#echo "cln_nexusMgr_f = "${cln_nexusMgr_f}

pushd $CURR_DIR/../ > /dev/null

if [ ! -f ${cln_nexusMgr_f} ]
then
   echo "----"
   echo "Starting \"make clean\" for nexusMgr"
   echo

   if ! make clean_nexusmgr; then err_exit "nexusMgr \"make clean_nexusmgr\" failed"; fi

   echo "nexusMgr build cleaned on "`date` > ${cln_nexusMgr_f}
fi

if ! make nexusMgr; then err_exit "nexusMgr \"make\" failed"; fi
echo	"----"
echo "nexusMgr build done"
echo

popd > /dev/null


# Build the Net libraries (curl, expat, openssl)

echo	"----"
echo "Building the curl library"
echo

export BSTD_CPU_ENDIAN=1234

pushd $BASE_DIR/AppLibs/opensource/libcurl > /dev/null

if [ ! -f ${cln_net_f} ]
then
	
        echo "----"
        echo "Starting \"make clean\" for curl library"
        echo

        if ! make clean; then err_exit "curl library \"make clean\" failed"; fi
        echo "curl library build cleaned on "`date` > ${cln_net_f}
fi

if ! make; then err_exit "curl library \"make\" failed"; fi

echo	"----"
echo "culr library build done"
echo

popd > /dev/null

#
# Copy curl libraries
#

echo	 "----"
echo	 "copying curl libraries"
echo	

pushd $BASE_DIR/AppLibs/opensource/libcurl/${CURL_VER}/lib/.libs > /dev/null

cp -fv libcurl.so* $BIN_DIR

popd > /dev/null

#
# Copy ssl, cryptol libraries
#

echo	 "----"
echo	 "copying ssl, crypto libraries"
echo	

pushd $BASE_DIR/BSEAV/lib/openssl/openssl-0.9.8h_${ARCH} > /dev/null

cp -fv libssl.so* $BIN_DIR
cp -fv libcrypto.so* $BIN_DIR

popd > /dev/null

#pushd $BASE_DIR/Net > /dev/null
#
#if [ ! -f ${cln_net_f} ]
#then
#	
#        echo "----"
#        echo "Starting \"make clean\" for net"
#        echo
#
#        if ! make clean; then err_exit "net \"make clean\" failed"; fi
#        echo "net build cleaned on "`date` > ${cln_net_f}
#fi
#
#if ! make; then err_exit "net \"make\" failed"; fi
#echo	"----"
#echo "net build done"
#echo
#
#popd > /dev/null


export SC_PLATFORM=bcm935230nexus
#export BASE_DIR
export BSTD_CPU_ENDIAN=1234

#
# Copy libraries
#
#

pushd $NEXUS/bin > /dev/null

echo	 "----"
echo	 "copying libraries"
echo	

cp -fv *.ko $BIN_DIR
cp -dfv *.so* $BIN_DIR

popd > /dev/null


#
# Copy install files 
#
#

echo	"----"
echo	"Copying install files to $BIN_DIR"
echo

pushd $NEXUS/build > /dev/null

cp -fv nexus $BIN_DIR

popd > /dev/null

#
# Copy temp libraries (to be replaced by "official" libs at some point)
#
#

pushd $TOOLCHAIN_ROOT/../mipsel-linux-uclibc/lib > /dev/null

cp -fv libstdc++.so.6 $BIN_DIR

popd > /dev/null

#
# Build Playback Device Library
#

#echo "NEXUS ="$NEXUS
#echo "BASE_DIR ="$BASE_DIR

pushd $CURR_DIR/../ > /dev/null

echo "----"
echo "Building libPlaybackDevice.so library"
echo

if ! make playbackdevice; then err_exit "libPlaybackDevice.so \"make cinemanow\" failed"; fi

echo	"----"
echo "libPlaybackDevice.so build done"
echo

popd > /dev/null

#
# Build test app
#

pushd $CURR_DIR > /dev/null

#echo "NEXUS ="$NEXUS

echo "----"
echo "Building app_playback_device test application"
echo

if ! make ; then err_exit "app_card_playback_device.cpp \"make\" failed"; fi

echo	"----"
echo "app_playback_device.cpp test application build done"
echo

popd > /dev/null

pushd $CURR_DIR > /dev/null

echo "cp -f app_playback_device $BIN_DIR"
cp -f app_playback_device $BIN_DIR

popd > /dev/null

#
# Exit - we're done
#
#

echo	"done"
echo	"----"
exit
