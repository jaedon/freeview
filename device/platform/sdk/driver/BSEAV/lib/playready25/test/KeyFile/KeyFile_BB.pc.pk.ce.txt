1261:BVT:Basic KeyFile Setup and access test
SkipTestIf( XBOX, !BBXLegacySupported )
GenerateRandomData( DevCert1, 5422 )
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PubKey2, 40 )
GenerateRandomData( PrivKey1, 20 )
GenerateRandomData( PrivKey2, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_KF_SetCertificate( KF_Context_1, eKF_CERT_TYPE_WMDRM, DevCert1)
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_ECC_160, KF_Context_1, PubKey1, EncryptedPrivKey1 )

Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey2, PrivKey2, KF_DECRYPTION_TYPE_AES_CBC, EncryptedPrivKey2-pb )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_ECC_160, KF_Context_1, PubKey2, EncryptedPrivKey2 )
Test_KF_StoreKeyFile( KF_Context_1 )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

Test_KF_CreateContext( KF_Context_2 )
Test_KF_Initialize( KF_Context_2 )
Test_KF_OpenKeyFile( KF_Context_2 )
Test_KF_LoadKeyFile( KF_Context_2 )
Test_KF_GetCertificate( KF_Context_2, eKF_CERT_TYPE_WMDRM, DevCert1 )
Test_KF_GetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_2, PubKey1, EncryptedPrivKey1-2 )
Test_Oem_KeyFile_DecryptKey( EncryptedPrivKey1-2, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )

Test_KF_GetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_2, PubKey2, EncryptedPrivKey2-2 )
Test_Oem_KeyFile_DecryptKey( EncryptedPrivKey2-2, PrivKey2, KF_DECRYPTION_TYPE_AES_CBC )
Test_KF_CloseKeyFile( KF_Context_2 )
Test_KF_Uninitialize( KF_Context_2 )
Test_KF_FreeContext( KF_Context_2 )

1262:BVT:Update an existing keyfile With a shorter cert and a new keypair
SkipTestIf( XBOX, !BBXLegacySupported )
GenerateRandomData( DevCert1, 7000 )
GenerateRandomData( DevCert2, 5422 )
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PubKey2, 40 )
GenerateRandomData( PubKey3, 40 )
GenerateRandomData( PrivKey1, 20 )
GenerateRandomData( PrivKey2, 20 )
GenerateRandomData( PrivKey3, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_KF_SetCertificate( KF_Context_1, eKF_CERT_TYPE_WMDRM, DevCert1)
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_ECC_160, KF_Context_1, PubKey1, EncryptedPrivKey1 )

Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey2, PrivKey2, KF_DECRYPTION_TYPE_AES_CBC, EncryptedPrivKey2-pb )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_ECC_160, KF_Context_1, PubKey2, EncryptedPrivKey2 )
Test_KF_StoreKeyFile( KF_Context_1 )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

Test_KF_CreateContext( KF_Context_2 )
Test_KF_Initialize( KF_Context_2 )
Test_KF_OpenKeyFile( KF_Context_2 )
Test_KF_LoadKeyFile( KF_Context_2 )
Test_KF_GetCertificate( KF_Context_2, eKF_CERT_TYPE_WMDRM, DevCert1 )
Test_KF_GetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_2, PubKey1, EncryptedPrivKey1-2 )
Test_Oem_KeyFile_DecryptKey( EncryptedPrivKey1-2, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )

Test_KF_GetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_2, PubKey2, EncryptedPrivKey2-2 )
Test_Oem_KeyFile_DecryptKey( EncryptedPrivKey2-2, PrivKey2, KF_DECRYPTION_TYPE_AES_CBC )
Test_KF_CloseKeyFile( KF_Context_2 )
Test_KF_Uninitialize( KF_Context_2 )
Test_KF_FreeContext( KF_Context_2 )

Test_KF_CreateContext( KF_Context_3 )
Test_KF_Initialize( KF_Context_3 )
Test_KF_OpenKeyFile( KF_Context_3 )
Test_KF_LoadKeyFile( KF_Context_3 )
Test_KF_SetCertificate( KF_Context_3, eKF_CERT_TYPE_WMDRM, DevCert2)
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey3, PrivKey3, KF_DECRYPTION_TYPE_AES_CBC, EncryptedPrivKey3-pb )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_ECC_160, KF_Context_3, PubKey3, EncryptedPrivKey3 )

Test_KF_StoreKeyFile( KF_Context_3 )
Test_KF_CloseKeyFile( KF_Context_3 )
Test_KF_Uninitialize( KF_Context_3 )
Test_KF_FreeContext( KF_Context_3 )

Test_KF_CreateContext( KF_Context_4 )
Test_KF_Initialize( KF_Context_4 )
Test_KF_OpenKeyFile( KF_Context_4 )
Test_KF_LoadKeyFile( KF_Context_4 )
Test_KF_GetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_4, PubKey1, EncryptedPrivKey1-2 )
Test_Oem_KeyFile_DecryptKey( EncryptedPrivKey1-2, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )

Test_KF_GetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_4, PubKey2, EncryptedPrivKey2-2 )
Test_Oem_KeyFile_DecryptKey( EncryptedPrivKey2-2, PrivKey2, KF_DECRYPTION_TYPE_AES_CBC )


Test_KF_GetCertificate( KF_Context_4, eKF_CERT_TYPE_WMDRM, DevCert2 )
Test_KF_GetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_4, PubKey3, EncryptedPrivKey3-2 )
Test_Oem_KeyFile_DecryptKey( EncryptedPrivKey3-2, PrivKey3, KF_DECRYPTION_TYPE_AES_CBC )

Test_KF_CloseKeyFile( KF_Context_4 )
Test_KF_Uninitialize( KF_Context_4 )
Test_KF_FreeContext( KF_Context_4 )


2073:BVT: Setup Keyfile with known content, Load keyfile and verify data.
SkipTestIf(!KeyFileUpgradeSupported, !BBXLegacySupported)
StoreStringInTestVariable( DevCert1, ThisIsAFauxWMDRMCertificate12345678900987654321abcdefghijklmnopqrstuvwxyz )
StoreStringInTestVariable( DevCert2, PretendThisIsANotSoFakePRCertificateABCabcdef01234567890ghiDEFjklGHImnoLKMNOPQRSTUVpqrstuvwxyzWXYZ123 )
StoreStringInTestVariable( DevCert3, NDCertificateFakeUp )
StoreStringInTestVariable( PubKey1, 1234567890123456789012345678901234567890 )
StoreStringInTestVariable( PubKey2, abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMN )
StoreStringInTestVariable( PrivKey1, 098765432109876543210 )
StoreStringInTestVariable( PrivKey2, ZYXABCWVUDEFTSRGHIQPO )
Test_KF_ReplaceKeyFile(files\keyfile.dat)
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )

Test_KF_GetCertificate( KF_Context_1, eKF_CERT_TYPE_WMDRM, DevCert1)
Test_KF_GetCertificate( KF_Context_1, eKF_CERT_TYPE_PLAYREADY, DevCert2)
Test_KF_GetCertificate( KF_Context_1, eKF_CERT_TYPE_NDT, DevCert3)

Test_Oem_KeyFile_EncryptKey( VerificationEncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_ECC_160, KF_Context_1, PubKey1, EncryptedPrivKey1, VerificationEncryptedPrivKey1 )

Test_Oem_KeyFile_EncryptKey( VerificationEncryptedPrivKey2, PrivKey2, KF_DECRYPTION_TYPE_AES_CBC, EncryptedPrivKey2-pb )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey2, EncryptedPrivKey2, VerificationEncryptedPrivKey2 )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )


'Note: to rebuild keyfile sample run the following lines and capture the result after Test_KF_CloseKeyFile() executed.
'StoreStringInTestVariable( DevCert1, ThisIsAFauxWMDRMCertificate12345678900987654321abcdefghijklmnopqrstuvwxyz )
'StoreStringInTestVariable( DevCert2, PretendThisIsANotSoFakePRCertificateABCabcdef01234567890ghiDEFjklGHImnoLKMNOPQRSTUVpqrstuvwxyzWXYZ123 )
'StoreStringInTestVariable( DevCert3, NDCertificateFakeUp )
'StoreStringInTestVariable( PubKey1, 1234567890123456789012345678901234567890 )
'StoreStringInTestVariable( PubKey2, abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMN )
'StoreStringInTestVariable( PrivKey1, 098765432109876543210 )
'StoreStringInTestVariable( PrivKey2, ZYXABCWVUDEFTSRGHIQPO )
'Test_KF_CreateContext( KF_Context_1 )
'Test_KF_Initialize( KF_Context_1 )
'Test_KF_OpenKeyFile( KF_Context_1 )
'Test_KF_LoadKeyFile( KF_Context_1 )
'Test_KF_SetCertificate( KF_Context_1, eKF_CERT_TYPE_WMDRM, DevCert1)
'Test_KF_SetCertificate( KF_Context_1, eKF_CERT_TYPE_PLAYREADY, DevCert2)
'Test_KF_SetCertificate( KF_Context_1, eKF_CERT_TYPE_NDT, DevCert3)
'Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
'Test_KF_SetPrivateKey( eKF_KEY_TYPE_ECC_160, KF_Context_1, PubKey1, EncryptedPrivKey1 )
'Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey2, PrivKey2, KF_DECRYPTION_TYPE_AES_CBC, EncryptedPrivKey2-pb )
'Test_KF_SetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey2, EncryptedPrivKey2 )
'Test_KF_StoreKeyFile( KF_Context_1 )
'Test_KF_CloseKeyFile( KF_Context_1 )
'Test_KF_Uninitialize( KF_Context_1 )
'Test_KF_FreeContext( KF_Context_1 )


'Bad Signatures should fail checking
'723:FUNC: Attempt to call LoadKeyFile on a keyfile with a nonexistant Signature object
'Test_KF_CreateContext( KF_Context_1 )
'Test_KF_Initialize( KF_Context_1 )
'Test_KF_OpenKeyFile( KF_Context_1 )
'Test_KF_LoadKeyFile( KF_Context_1 )=DRM_E_XB_INVALID_OBJECT
'Test_KF_LoadKeyFile( KF_Context_1 )
'Test_KF_GetCertificate( KF_Context_1, eKF_CERT_TYPE_WMDRM, DevCert1)
'Test_KF_GetCertificate( KF_Context_1, eKF_CERT_TYPE_PLAYREADY, DevCert2)
'Test_KF_GetCertificate( KF_Context_1, eKF_CERT_TYPE_NDT, DevCert3)
'Test_Oem_KeyFile_EncryptKey( VerificationEncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
'Test_Oem_KeyFile_EncryptKey( VerificationEncryptedPrivKey2, PrivKey2, KF_DECRYPTION_TYPE_CLEAR )
'Test_KF_GetPrivateKey( eKF_KEY_TYPE_ECC_160, KF_Context_1, PubKey1, EncryptedPrivKey1, VerificationEncryptedPrivKey1 )
'Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey2, EncryptedPrivKey2, VerificationEncryptedPrivKey2 )
'Test_KF_CloseKeyFile( KF_Context_1 )
'Test_KF_Uninitialize( KF_Context_1 )
'Test_KF_FreeContext( KF_Context_1 )

1263:BVT: Use DRM_KF_StoreToFile to store multiple keys to file
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PubKey2, 40 )
GenerateRandomData( PubKey3, 40 )
GenerateRandomData( PrivKey1, 20 )
GenerateRandomData( PrivKey2, 20 )
GenerateRandomData( PrivKey3, 20 )

Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey1, EncryptedPrivKey1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey2, PrivKey2, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey2, EncryptedPrivKey2 )
Test_KF_StoreKeyFile( KF_Context_1 )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

Test_KF_CreateContext( KF_Context_2 )
Test_KF_Initialize( KF_Context_2 )
Test_KF_OpenKeyFile( KF_Context_2 )
Test_KF_LoadKeyFile( KF_Context_2 )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_2, PubKey1, VerificationEncryptedPrivKey1, EncryptedPrivKey1 )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_2, PubKey2, VerificationEncryptedPrivKey2, EncryptedPrivKey2 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey3, PrivKey3, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_2, PubKey3, EncryptedPrivKey3 )
Test_KF_StoreKeyFile( KF_Context_2 )
Test_KF_CloseKeyFile( KF_Context_2 )
Test_KF_Uninitialize( KF_Context_2 )
Test_KF_FreeContext( KF_Context_2 )

Test_KF_CreateContext( KF_Context_3 )
Test_KF_Initialize( KF_Context_3 )
Test_KF_OpenKeyFile( KF_Context_3 )
Test_KF_LoadKeyFile( KF_Context_3 )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_3, PubKey1, VerificationEncryptedPrivKey1, EncryptedPrivKey1 )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_3, PubKey2, VerificationEncryptedPrivKey2, EncryptedPrivKey2 )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_3, PubKey3, VerificationEncryptedPrivKey3, EncryptedPrivKey3 )
Test_KF_StoreKeyFile( KF_Context_3 )
Test_KF_CloseKeyFile( KF_Context_3 )
Test_KF_Uninitialize( KF_Context_3 )
Test_KF_FreeContext( KF_Context_3 )

1264:BVT: Use DRM_KF_StoreToFile to store multiple keys and certificates to file
GenerateRandomData( PubKey1, 45 )
GenerateRandomData( PubKey2, 50 )
GenerateRandomData( PubKey3, 10 )
GenerateRandomData( PrivKey1, 20 )
GenerateRandomData( PrivKey2, 30 )
GenerateRandomData( PrivKey3, 70 )

GenerateRandomData( DevCert1, 5422 )
GenerateRandomData( DevCert2, 3022 )
GenerateRandomData( DevCert3, 911 )

Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey1, EncryptedPrivKey1 )
Test_KF_SetCertificate( KF_Context_1, eKF_CERT_TYPE_WMDRM, DevCert1)
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey2, PrivKey2, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey2, EncryptedPrivKey2 )
Test_KF_SetCertificate( KF_Context_1, eKF_CERT_TYPE_PLAYREADY, DevCert2)
Test_KF_StoreKeyFile( KF_Context_1 )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

Test_KF_CreateContext( KF_Context_2 )
Test_KF_Initialize( KF_Context_2 )
Test_KF_OpenKeyFile( KF_Context_2 )
Test_KF_LoadKeyFile( KF_Context_2 )
Test_KF_GetCertificate( KF_Context_2, eKF_CERT_TYPE_WMDRM, DevCert1)
Test_KF_GetCertificate( KF_Context_2, eKF_CERT_TYPE_PLAYREADY, DevCert2)
Test_KF_SetCertificate( KF_Context_2, eKF_CERT_TYPE_WMDRM, DevCert1)
Test_KF_SetCertificate( KF_Context_2, eKF_CERT_TYPE_NDT, DevCert3)
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_2, PubKey1, VerificationEncryptedPrivKey1, EncryptedPrivKey1 )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_2, PubKey2, VerificationEncryptedPrivKey2, EncryptedPrivKey2 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey3, PrivKey3, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_2, PubKey3, EncryptedPrivKey3 )
Test_KF_StoreKeyFile( KF_Context_2 )
Test_KF_CloseKeyFile( KF_Context_2 )
Test_KF_Uninitialize( KF_Context_2 )
Test_KF_FreeContext( KF_Context_2 )

Test_KF_CreateContext( KF_Context_3 )
Test_KF_Initialize( KF_Context_3 )
Test_KF_OpenKeyFile( KF_Context_3 )
Test_KF_LoadKeyFile( KF_Context_3 )
Test_KF_GetCertificate( KF_Context_3, eKF_CERT_TYPE_PLAYREADY, DevCert2)
Test_KF_GetCertificate( KF_Context_3, eKF_CERT_TYPE_WMDRM, DevCert1)
Test_KF_GetCertificate( KF_Context_3, eKF_CERT_TYPE_NDT, DevCert3)
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_3, PubKey1, VerificationEncryptedPrivKey1, EncryptedPrivKey1 )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_3, PubKey2, VerificationEncryptedPrivKey2, EncryptedPrivKey2 )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_3, PubKey3, VerificationEncryptedPrivKey3, EncryptedPrivKey3 )
Test_KF_StoreKeyFile( KF_Context_3 )
Test_KF_CloseKeyFile( KF_Context_3 )
Test_KF_Uninitialize( KF_Context_3 )
Test_KF_FreeContext( KF_Context_3 )

1265:BVT: Validate that DRM_KF_GetPrivateKey can return an expected stored key
SkipTestIf( XBOX, !BBXLegacySupported )
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PrivKey1, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey1, EncryptedPrivKey1 )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey1, VerificationEncryptedPrivKey1, EncryptedPrivKey1 )
Test_Oem_KeyFile_DecryptKey( VerificationEncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_StoreKeyFile( KF_Context_1 )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )


1266:BVT: Validate that DRM_KF_GetPrivateKey can return an expected secure store key
SkipTestIf( XBOX, !BBXLegacySupported )
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PrivKey1, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_SECURE_STORE, KF_Context_1, NULL, EncryptedPrivKey1 )
Test_KF_GetPrivateKey( eKF_KEY_SECURE_STORE, KF_Context_1, NULL, VerificationEncryptedPrivKey1, EncryptedPrivKey1 )
Test_Oem_KeyFile_DecryptKey( VerificationEncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_StoreKeyFile( KF_Context_1 )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

1267:BVT: Attempt to call DRM_KF_GetPrivateKey to retrieve a key with a mismatched public and private key pair
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PubKey2, 60 )
GenerateRandomData( PrivKey1, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey1, EncryptedPrivKey1 )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey2, VerificationEncryptedPrivKey1, EncryptedPrivKey1 )=DRM_E_KEYFILE_PRIVATE_KEY_NOT_FOUND
Test_KF_StoreKeyFile( KF_Context_1 )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

1268:FUNC: Attempt to call DRM_KF_GetPrivateKey with Secure Store Keytype and a non-zero Public Key
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PrivKey1, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_SECURE_STORE, KF_Context_1, PubKey1, EncryptedPrivKey1, NULL, INVALID )=DRM_E_INVALIDARG
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

1269:FUNC: Attempt to call DRM_KF_GetPrivateKey with invalid keytype
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PrivKey1, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey1, EncryptedPrivKey1 )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_INVALID, KF_Context_1, PubKey1, VerificationEncryptedPrivKey1, EncryptedPrivKey1 )=DRM_E_INVALIDARG
Test_KF_StoreKeyFile( KF_Context_1 )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

1270:FUNC: Attempt to call DRM_KF_GetPrivateKey with non Secure Store keytype and a null public key
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PubKey2, 60 )
GenerateRandomData( PrivKey1, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey1, EncryptedPrivKey1 )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, NULL, VerificationEncryptedPrivKey1, EncryptedPrivKey1 )=DRM_E_INVALIDARG
Test_KF_StoreKeyFile( KF_Context_1 )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

1271:FUNC: Call Test_KF_GetPrivateKey with an uninitialized Keyfile Context
SkipTestIf( !BBXLegacySupported )
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PrivKey1, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_VerifyContext( KF_Context_1, UNINIT )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_GetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_1, PubKey1, EncryptedPrivKey1 ) = DRM_E_KEYFILE_NOT_INITED
Test_KF_Initialize( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_VerifyContext( KF_Context_1, UNINIT )
Test_KF_GetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_1, PubKey1, EncryptedPrivKey1 ) = DRM_E_KEYFILE_NOT_INITED
Test_KF_FreeContext( KF_Context_1 )

1272:FUNC: Call Test_KF_GetPrivateKey with an unopened, initialized Keyfile Context
SkipTestIf( !BBXLegacySupported )
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PrivKey1, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_VerifyContext( KF_Context_1, INIT )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_GetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_1, PubKey1, EncryptedPrivKey1 ) = DRM_E_INVALIDARG
Test_KF_VerifyContext( KF_Context_1, INIT )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

1273:FUNC: Call Test_KF_GetPrivateKey with an initialized, opened, unloaded Keyfile Context
SkipTestIf( !BBXLegacySupported )
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PrivKey1, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_VerifyContext( KF_Context_1, OPEN )
Test_KF_GetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_1, PubKey1, EncryptedPrivKey1 ) = DRM_E_INVALIDARG
Test_KF_VerifyContext( KF_Context_1, OPEN )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

1274:FUNC: Call Test_KF_GetPrivateKey with various combinations of illegal NULL arguments
SkipTestIf( !BBXLegacySupported )
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PrivKey1, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_VerifyContext( KF_Context_1, OPEN )
Test_KF_VerifyContext( KF_Context_1, LOADED )
Test_KF_GetPrivateKey(  eKF_KEY_TYPE_ECC_160, NULL, PubKey1, EncryptedPrivKey1 ) = DRM_E_INVALIDARG
Test_KF_GetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_1, NULL, EncryptedPrivKey1 ) = DRM_E_INVALIDARG
Test_KF_GetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_1, PubKey1, NULL ) = DRM_E_INVALIDARG
Test_KF_VerifyContext( KF_Context_1, OPEN )
Test_KF_VerifyContext( KF_Context_1, LOADED )
Test_KF_GetPrivateKey(  eKF_KEY_TYPE_ECC_160, NULL, NULL, EncryptedPrivKey1 ) = DRM_E_INVALIDARG
Test_KF_GetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_1, NULL, NULL ) = DRM_E_INVALIDARG
Test_KF_GetPrivateKey(  eKF_KEY_TYPE_ECC_160, NULL, NULL, NULL ) = DRM_E_INVALIDARG
Test_KF_VerifyContext( KF_Context_1, LOADED )
Test_KF_VerifyContext( KF_Context_1, OPEN )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

1275:BVT: Validate that DRM_KF_SetPrivateKey can store keys in an empty keyfile
SkipTestIf( XBOX, !BBXLegacySupported )
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PrivKey1, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey1, EncryptedPrivKey1 )
Test_KF_VerifyContext( KF_Context_1, Key, eKF_KEY_TYPE_RSA )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey1, VerificationEncryptedPrivKey1, EncryptedPrivKey1 )
Test_Oem_KeyFile_DecryptKey( VerificationEncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_StoreKeyFile( KF_Context_1 )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

1276:FUNC: Validate that DRM_KF_SetPrivateKey can store keys in an keyfile with existing keys
SkipTestIf( !BBXLegacySupported )
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PrivKey1, 20 )
GenerateRandomData( PubKey2, 40 )
GenerateRandomData( PrivKey2, 20 )

Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_ECC_256, KF_Context_1, PubKey1, EncryptedPrivKey1 )
Test_KF_VerifyContext( KF_Context_1, Key, eKF_KEY_TYPE_RSA )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_ECC_256, KF_Context_1, PubKey1, VerificationEncryptedPrivKey1, EncryptedPrivKey1 )
Test_Oem_KeyFile_DecryptKey( VerificationEncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_StoreKeyFile( KF_Context_1 )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

Test_KF_CreateContext( KF_Context_2 )
Test_KF_Initialize( KF_Context_2 )
Test_KF_OpenKeyFile( KF_Context_2 )
Test_KF_LoadKeyFile( KF_Context_2 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey2, PrivKey2, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_2, PubKey2, EncryptedPrivKey2 )
Test_KF_VerifyContext( KF_Context_2, Key, eKF_KEY_TYPE_RSA )
Test_KF_VerifyContext( KF_Context_2, Key, eKF_KEY_TYPE_RSA )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_2, PubKey2, VerificationEncryptedPrivKey2, EncryptedPrivKey2 )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_ECC_256, KF_Context_2, PubKey1, VerificationEncryptedPrivKey1, EncryptedPrivKey1 )
Test_Oem_KeyFile_DecryptKey( VerificationEncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_Oem_KeyFile_DecryptKey( VerificationEncryptedPrivKey2, PrivKey2, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_CloseKeyFile( KF_Context_2 )
Test_KF_Uninitialize( KF_Context_2 )
Test_KF_FreeContext( KF_Context_2 )

1277:FUNC: Attempt to call DRM_KF_SetPrivateKey with invalid Key Ciphers and public key types
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PrivKey1, 20 )

Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_SECURE_STORE, KF_Context_1, PubKey1, EncryptedPrivKey1, NULL, INVALID ) = DRM_E_INVALIDARG
Test_KF_SetPrivateKey( eKF_KEY_SECURE_STORE, KF_Context_1, PubKey1, EncryptedPrivKey1, INVALID, NULL ) = DRM_E_INVALIDARG
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )


1278:FUNC: Attempt to call DRM_KF_SetPrivateKey with an non Secure Store key and a null public key
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PrivKey1, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, NULL, EncryptedPrivKey1 ) = DRM_E_INVALIDARG
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

12933:FUNC: Use KF_SetPrivateKey to update a key in place
SkipTestIf( !BBXLegacySupported )
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PrivKey1, 20 )
GenerateRandomData( PubKey2, 40 )
GenerateRandomData( PrivKey2, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_ECC_256, KF_Context_1, PubKey1, EncryptedPrivKey1 )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_ECC_256, KF_Context_1, PubKey1, VerificationEncryptedPrivKey1, EncryptedPrivKey1 )
Test_Oem_KeyFile_DecryptKey( VerificationEncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey2, PrivKey2, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_ECC_256, KF_Context_1, PubKey1, EncryptedPrivKey2 )
Test_KF_GetPrivateKey( eKF_KEY_TYPE_ECC_256, KF_Context_1, PubKey1, VerificationEncryptedPrivKey2, EncryptedPrivKey2 )
Test_Oem_KeyFile_DecryptKey( VerificationEncryptedPrivKey2, PrivKey2, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_StoreKeyFile( KF_Context_1 )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

1279:FUNC: Call Test_KF_SetPrivateKey with an uninitialized Keyfile Context
SkipTestIf( !BBXLegacySupported )
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PrivKey1, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_VerifyContext( KF_Context_1, UNINIT )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_ECC_160, KF_Context_1, PubKey1, EncryptedPrivKey1 ) = DRM_E_KEYFILE_NOT_INITED
Test_KF_VerifyContext( KF_Context_1, UNINIT )
Test_KF_Initialize( KF_Context_1 )
Test_KF_VerifyContext( KF_Context_1, INIT )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_VerifyContext( KF_Context_1, UNINIT )
Test_KF_SetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_1, PubKey1, EncryptedPrivKey1 ) = DRM_E_KEYFILE_NOT_INITED
Test_KF_VerifyContext( KF_Context_1, UNINIT )
Test_KF_FreeContext( KF_Context_1 )

1280:FUNC: Call Test_KF_SetPrivateKey with an unopened, initialized Keyfile Context
SkipTestIf( !BBXLegacySupported )
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PrivKey1, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_VerifyContext( KF_Context_1, INIT )
Test_KF_SetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_1, PubKey1, EncryptedPrivKey1 ) = DRM_E_INVALIDARG
Test_KF_VerifyContext( KF_Context_1, INIT )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

1281:FUNC: Call Test_KF_SetPrivateKey with an initialized, opened, unloaded Keyfile Context
SkipTestIf( !BBXLegacySupported )
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PrivKey1, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_VerifyContext( KF_Context_1, OPEN )
Test_KF_SetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_1, PubKey1, EncryptedPrivKey1 ) = DRM_E_INVALIDARG
Test_KF_VerifyContext( KF_Context_1, OPEN )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

1282:FUNC: Call Test_KF_SetPrivateKey with various combinations of illegal NULL arguments
SkipTestIf( !BBXLegacySupported )
GenerateRandomData( DevCert1, 5422 )
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PubKey2, 40 )
GenerateRandomData( PrivKey1, 20 )
GenerateRandomData( PrivKey2, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_KF_SetCertificate( KF_Context_1, eKF_CERT_TYPE_WMDRM, DevCert1)
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_VerifyContext( KF_Context_1, OPEN )
Test_KF_VerifyContext( KF_Context_1, LOADED )
Test_KF_SetPrivateKey(  eKF_KEY_TYPE_ECC_160, NULL, PubKey1, EncryptedPrivKey1 ) = DRM_E_INVALIDARG
Test_KF_VerifyContext( KF_Context_1, OPEN )
Test_KF_SetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_1, NULL, EncryptedPrivKey1 ) = DRM_E_INVALIDARG
Test_KF_SetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_1, PubKey1, NULL ) = DRM_E_INVALIDARG
Test_KF_SetPrivateKey(  eKF_KEY_TYPE_ECC_160, NULL, NULL, EncryptedPrivKey1 ) = DRM_E_INVALIDARG
Test_KF_SetPrivateKey(  eKF_KEY_TYPE_ECC_160, KF_Context_1, NULL, NULL ) = DRM_E_INVALIDARG
Test_KF_SetPrivateKey(  eKF_KEY_TYPE_ECC_160, NULL, NULL, NULL ) = DRM_E_INVALIDARG
Test_KF_VerifyContext( KF_Context_1, OPEN )
Test_KF_VerifyContext( KF_Context_1, LOADED )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

1283:BVT: Cold boot, adding two different certificates and renewing one
SkipTestIf( XBOX )
GenerateRandomData( DevCert1, 5422 )
GenerateRandomData( DevCert2, 1222 )
GenerateRandomData( DevCert3, 3431 )
GenerateRandomData( PubKey1, 40 )
GenerateRandomData( PubKey2, 40 )
GenerateRandomData( PrivKey1, 20 )
GenerateRandomData( PrivKey2, 20 )
Test_KF_CreateContext( KF_Context_1 )
Test_KF_Initialize( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey1, PrivKey1, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey1, EncryptedPrivKey1 )
Test_KF_SetCertificate( KF_Context_1, eKF_CERT_TYPE_WMDRM, DevCert1)
Test_KF_StoreKeyFile( KF_Context_1 )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_LoadKeyFile( KF_Context_1 )
Test_KF_GetCertificate( KF_Context_1, eKF_CERT_TYPE_WMDRM, DevCert1)
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey1, VerificationEncryptedPrivKey1, EncryptedPrivKey1 )
Test_Oem_KeyFile_EncryptKey( EncryptedPrivKey2, PrivKey2, KF_DECRYPTION_TYPE_CLEAR )
Test_KF_SetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey2, EncryptedPrivKey2 )
Test_KF_StoreKeyFile( KF_Context_1 )
Test_KF_SetCertificate( KF_Context_1, eKF_CERT_TYPE_WMDRM, DevCert2)
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_OpenKeyFile( KF_Context_1 )
Test_KF_GetCertificate( KF_Context_1, eKF_CERT_TYPE_WMDRM, DevCert2)
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_1, PubKey1, VerificationEncryptedPrivKey1, EncryptedPrivKey1 )
Test_KF_SetCertificate( KF_Context_1, eKF_CERT_TYPE_PLAYREADY, DevCert3)
Test_KF_StoreKeyFile( KF_Context_1 )
Test_KF_CloseKeyFile( KF_Context_1 )
Test_KF_Uninitialize( KF_Context_1 )
Test_KF_FreeContext( KF_Context_1 )

Test_KF_CreateContext( KF_Context_2 )
Test_KF_Initialize( KF_Context_2 )
Test_KF_OpenKeyFile( KF_Context_2 )
Test_KF_LoadKeyFile( KF_Context_2 )
Test_KF_GetCertificate( KF_Context_2, eKF_CERT_TYPE_WMDRM, DevCert2)
Test_KF_GetCertificate( KF_Context_2, eKF_CERT_TYPE_PLAYREADY, DevCert3)
Test_KF_GetPrivateKey( eKF_KEY_TYPE_RSA, KF_Context_2, PubKey1, VerificationEncryptedPrivKey1, EncryptedPrivKey1 )
Test_KF_CloseKeyFile( KF_Context_2 )
Test_KF_Uninitialize( KF_Context_2 )
Test_KF_FreeContext( KF_Context_2 )