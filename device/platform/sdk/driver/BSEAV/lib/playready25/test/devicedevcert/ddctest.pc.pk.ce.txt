' -------------------------------------------------------------------------------------------------
11444:BVT:DRM_DDC_GetDeviceCertificate returns the devcert if it is present
SkipTestIf(!WMDRMSupported)
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, TRUE)
' Check the XML Device certificate
Test_API_GetDeviceCertificate(10240, 0, NORMAL, 0 DataBuffer)
Test_CompareXMLDataBuffer(0 DataBuffer, Devcert)
Test_API_GetDeviceCertificate(10240, 1, NORMAL, 1 DataBuffer)
Test_CompareXMLDataBuffer(1 DataBuffer, Devcert)
Test_CompareXMLDataBuffer(0 DataBuffer, 1 DataBuffer)


' -------------------------------------------------------------------------------------------------
12444:BVT:DRM_DDC_GetDeviceCertificate returns the bindevcert if it is present
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, TRUE)
'Check the binary device certificate
Test_API_GetBinaryDeviceCertificate(10240, 0, NORMAL, 0 DataBuffer)
Test_CompareBinaryDataBuffer(0 DataBuffer, Devcert)
Test_API_GetBinaryDeviceCertificate(10240, 1, NORMAL, 1 DataBuffer)
Test_CompareBinaryDataBuffer(1 DataBuffer, Devcert)
Test_CompareBinaryDataBuffer(0 DataBuffer, 1 DataBuffer)


' -------------------------------------------------------------------------------------------------
11445:BVT:DRM_DDC_GetDeviceCertificate creates a valid devcert if it does not exist
SkipTestIf(!WMDRMSupported)
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
' Check the XML Device certificate generation
Test_API_GetDeviceCertificate(10240, 1, NORMAL, 0 DataBuffer)
Test_CompareXMLDataBuffer(0 DataBuffer, Devcert)
Test_VerifyXMLDevcert(0 DataBuffer)


' -------------------------------------------------------------------------------------------------
12445:BVT:DRM_DDC_GetDeviceCertificate creates a valid bindevcert if it does not exist
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
'Check the binary device certificate generation
Test_API_GetBinaryDeviceCertificate(10240, 1, NORMAL, 1 DataBuffer)
Test_CompareBinaryDataBuffer(1 DataBuffer, Devcert)
Test_VerifyBinaryDevcert(1 DataBuffer)


' -------------------------------------------------------------------------------------------------
11461:BVT:WM7 model specific exclusion, confirm model info in device cert is correct after drm_initialize
SkipTestIf(!WMDRMSupported)
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_InitWithOemData("DeviceModel", "RealModelInfo");
' Check the XML Device certificate generated by Drm_Initialize
Test_API_GetDeviceCertificate(10240, 0, NORMAL, 0 DataBuffer)
Test_CompareXMLDataBuffer(0 DataBuffer, Devcert)
Test_VerifyXMLDevcert(0 DataBuffer)
Test_VerifyXMLDevcert_ModelInfo(0 DataBuffer, "RealModelInfo")


' -------------------------------------------------------------------------------------------------
12461:BVT:WM7 model specific exclusion, confirm model info in binary device cert is correct after drm_initialize
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_InitWithOemData("DeviceModel", "RealModelInfo");
' Check the binary device certificate generated by Drm_Initialize
Test_API_GetBinaryDeviceCertificate(10240, 0, NORMAL, 1 DataBuffer)
Test_CompareBinaryDataBuffer(1 DataBuffer, Devcert)
Test_VerifyBinaryDevcert(1 DataBuffer, NULL, NULL, "RealModelInfo")


' -------------------------------------------------------------------------------------------------
12466:BVT:Create 5 keys in the keyfile and verify that key history works
SkipTestIf( XBOX, !DeviceAssetsSupported )

TestManagerSetRights( Play )

' Make one key and use it with KID 1
Test_SetDeviceEnv( devcerttemplate.dat, priv.dat, bgroupcert_2.5_1.dat, zgpriv_2.5_1.dat, FALSE )
TestManagerInitialize()
TestManagerSetKID( n1/NueNnHDgdPwHsbrQhIw== )
TestManagerAddXMRLicense( n1/NueNnHDgdPwHsbrQhIw==, RANDOM, XVBovsmzhP9gRIZxWfFta3VVRPzVEWmJsazEJ46I )
TestManagerProcessResponse( Dump, Dump, 0, 0 )
TestManagerBind( 0 don't overwrite drmmanager context, Dump, Dump, NULL )
TestManagerCheckDecryptContext( n1/NueNnHDgdPwHsbrQhIw==, XVBovsmzhP9gRIZxWfFta3VVRPzVEWmJsazEJ46I, AESCrypto )
TestManagerCommit()
TestManagerClose()
TestManagerUninitialize()

' Make another key and use it with KID 2
Test_SetDeviceEnv( devcerttemplate.dat, priv.dat, bgroupcert_2.5_2.dat, zgpriv_2.5_2.dat, FALSE )
TestManagerInitialize()
TestManagerSetKID( n2/NueNnHDgdPwHsbrQhIw== )
TestManagerAddXMRLicense( n2/NueNnHDgdPwHsbrQhIw==, RANDOM, XVBovsmzhP9gRIZxWfFta3VVRPzVEWmJsazEJ46I )
TestManagerProcessResponse( Dump, Dump, 0, 0 )
TestManagerBind( 0 don't overwrite drmmanager context, Dump, Dump, NULL )
TestManagerCheckDecryptContext( n2/NueNnHDgdPwHsbrQhIw==, XVBovsmzhP9gRIZxWfFta3VVRPzVEWmJsazEJ46I, AESCrypto )
TestManagerCommit()
TestManagerClose()
TestManagerUninitialize()

' Make another key and use it with KID 3
Test_SetDeviceEnv( devcerttemplate.dat, priv.dat, bgroupcert_2.5_3.dat, zgpriv_2.5_3.dat, FALSE )
TestManagerInitialize()
TestManagerSetKID( n3/NueNnHDgdPwHsbrQhIw== )
TestManagerAddXMRLicense( n3/NueNnHDgdPwHsbrQhIw==, RANDOM, XVBovsmzhP9gRIZxWfFta3VVRPzVEWmJsazEJ46I )
TestManagerProcessResponse( Dump, Dump, 0, 0 )
TestManagerBind( 0 don't overwrite drmmanager context, Dump, Dump, NULL )
TestManagerCheckDecryptContext( n3/NueNnHDgdPwHsbrQhIw==, XVBovsmzhP9gRIZxWfFta3VVRPzVEWmJsazEJ46I, AESCrypto )
TestManagerCommit()
TestManagerClose()
TestManagerUninitialize()

' Make another key and use it with KID 4
Test_SetDeviceEnv( devcerttemplate.dat, priv.dat, bgroupcert_2.5_4.dat, zgpriv_2.5_4.dat, FALSE )
TestManagerInitialize()
TestManagerSetKID( n4/NueNnHDgdPwHsbrQhIw== )
TestManagerAddXMRLicense( n4/NueNnHDgdPwHsbrQhIw==, RANDOM, XVBovsmzhP9gRIZxWfFta3VVRPzVEWmJsazEJ46I )
TestManagerProcessResponse( Dump, Dump, 0, 0 )
TestManagerBind( 0 don't overwrite drmmanager context, Dump, Dump, NULL )
TestManagerCheckDecryptContext( n4/NueNnHDgdPwHsbrQhIw==, XVBovsmzhP9gRIZxWfFta3VVRPzVEWmJsazEJ46I, AESCrypto )
TestManagerCommit()
TestManagerClose()
TestManagerUninitialize()

' Make another key and use it with KID 5
Test_SetDeviceEnv( devcerttemplate.dat, priv.dat, bgroupcert_2.5_5.dat, zgpriv_2.5_5.dat, FALSE )
TestManagerInitialize()
TestManagerSetKID( n5/NueNnHDgdPwHsbrQhIw== )
TestManagerAddXMRLicense( n5/NueNnHDgdPwHsbrQhIw==, RANDOM, XVBovsmzhP9gRIZxWfFta3VVRPzVEWmJsazEJ46I )
TestManagerProcessResponse( Dump, Dump, 0, 0 )
TestManagerBind( 0 don't overwrite drmmanager context, Dump, Dump, NULL )
TestManagerCheckDecryptContext( n5/NueNnHDgdPwHsbrQhIw==, XVBovsmzhP9gRIZxWfFta3VVRPzVEWmJsazEJ46I, AESCrypto )
TestManagerCommit()
TestManagerClose()

' Make sure the first 4 KIDs still work
TestClearHeader()
TestManagerSetKID( n1/NueNnHDgdPwHsbrQhIw== )
TestManagerBind( 0 don't overwrite drmmanager context, Dump, Dump, NULL )
TestManagerCheckDecryptContext( n1/NueNnHDgdPwHsbrQhIw==, XVBovsmzhP9gRIZxWfFta3VVRPzVEWmJsazEJ46I, AESCrypto )
TestManagerCommit()
TestManagerClose()
TestClearHeader()
TestManagerSetKID( n2/NueNnHDgdPwHsbrQhIw== )
TestManagerBind( 0 don't overwrite drmmanager context, Dump, Dump, NULL )
TestManagerCheckDecryptContext( n2/NueNnHDgdPwHsbrQhIw==, XVBovsmzhP9gRIZxWfFta3VVRPzVEWmJsazEJ46I, AESCrypto )
TestManagerCommit()
TestManagerClose()
TestClearHeader()
TestManagerSetKID( n3/NueNnHDgdPwHsbrQhIw== )
TestManagerBind( 0 don't overwrite drmmanager context, Dump, Dump, NULL )
TestManagerCheckDecryptContext( n3/NueNnHDgdPwHsbrQhIw==, XVBovsmzhP9gRIZxWfFta3VVRPzVEWmJsazEJ46I, AESCrypto )
TestManagerCommit()
TestManagerClose()
TestClearHeader()
TestManagerSetKID( n4/NueNnHDgdPwHsbrQhIw== )
TestManagerBind( 0 don't overwrite drmmanager context, Dump, Dump, NULL )
TestManagerCheckDecryptContext( n4/NueNnHDgdPwHsbrQhIw==, XVBovsmzhP9gRIZxWfFta3VVRPzVEWmJsazEJ46I, AESCrypto )
TestManagerCommit()
TestManagerClose()

TestManagerUninitialize()


' -------------------------------------------------------------------------------------------------
11462:FUNC:WM7 model specific exclusion, confirm model info in device cert is correct after drm_initialize, test model info with special characters
SkipTestIf(!WMDRMSupported)
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_InitWithOemData("DeviceModel", "TestDeviceModelBlah ~`!@#$%^&*()_+-=\|{}[]:;'?><,./\\345");
' Check the XML Device certificate generated by Drm_Initialize
Test_API_GetDeviceCertificate(10240, 0, NORMAL, 0 DataBuffer)
Test_CompareXMLDataBuffer(0 DataBuffer, Devcert)
Test_VerifyXMLDevcert(0 DataBuffer)
Test_VerifyXMLDevcert_ModelInfo(0 DataBuffer, "TestDeviceModelBlah ~`!@#$%^&*()_+-=\|{}[]:;'?><,./\\345")


' -------------------------------------------------------------------------------------------------
12462:FUNC:WM7 model specific exclusion, confirm model info in binary device cert is correct after drm_initialize, test model info with special characters
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_InitWithOemData("DeviceModel", "TestDeviceModelBlah ~`!@#$%^&*()_+-=\|{}[]:;'?><,./\\345");
' Check the binary device certificate generated by Drm_Initialize
Test_API_GetBinaryDeviceCertificate(10240, 0, NORMAL, 1 DataBuffer)
Test_CompareBinaryDataBuffer(1 DataBuffer, Devcert)
Test_VerifyBinaryDevcert(1 DataBuffer, NULL, NULL, "TestDeviceModelBlah ~`!@#$%^&*()_+-=\|{}[]:;'?><,./\\345")


' -------------------------------------------------------------------------------------------------
11463:FUNC:WM7 model specific exclusion, confirm model info in device cert after drm_initialize, test model info with string length 64
SkipTestIf(!WMDRMSupported)
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_InitWithOemData("DeviceModel", "64aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa64");
' Check the XML Device certificate generated by Drm_Initialize
Test_API_GetDeviceCertificate(10240, 0, NORMAL, 0 DataBuffer)
Test_CompareXMLDataBuffer(0 DataBuffer, Devcert)
Test_VerifyXMLDevcert(0 DataBuffer)
Test_VerifyXMLDevcert_ModelInfo(0 DataBuffer, "64aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa64")


' -------------------------------------------------------------------------------------------------
12463:FUNC:WM7 model specific exclusion, confirm model info in binary device cert after drm_initialize, test model info with string length 64
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_InitWithOemData("DeviceModel", "64aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa64");
' Check the binary device certificate generated by Drm_Initialize
Test_API_GetBinaryDeviceCertificate(10240, 0, NORMAL, 1 DataBuffer)
Test_CompareBinaryDataBuffer(1 DataBuffer, Devcert)
Test_VerifyBinaryDevcert(1 DataBuffer, NULL, NULL, "64aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa64")


' -------------------------------------------------------------------------------------------------
11464:FUNC:WM7 model specific exclusion, test model info with string length 65 for XML device certificate, confirm truncated to 64
SkipTestIf(!WMDRMSupported)
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_InitWithOemData("DeviceModel", "64aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa64b")
' Check the XML Device certificate generated by Drm_Initialize
Test_API_GetDeviceCertificate(10240, 0, NORMAL, 0 DataBuffer)
Test_CompareXMLDataBuffer(0 DataBuffer, Devcert)
Test_VerifyXMLDevcert(0 DataBuffer)
Test_VerifyXMLDevcert_ModelInfo(0 DataBuffer, "64aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa64")


' -------------------------------------------------------------------------------------------------
12464:FUNC:WM7 model specific exclusion, test model info with string length 65 for binary device certificate, confirm truncated to 64
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_InitWithOemData("DeviceModel", "64aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa64b");
' Check the binary device certificate generated by Drm_Initialize
Test_API_GetBinaryDeviceCertificate(10240, 0, NORMAL, 1 DataBuffer)
Test_CompareBinaryDataBuffer(1 DataBuffer, Devcert)
Test_VerifyBinaryDevcert(1 DataBuffer, NULL, NULL, "64aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa64")


' -------------------------------------------------------------------------------------------------
11446:FUNC:DRM_DDC_GetDeviceCertificate creates different (random) device keys
SkipTestIf(!WMDRMSupported)
' Check the XML Device certificate
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_API_GetDeviceCertificate(10240, 1, NORMAL, 0 DataBuffer)
Test_RemoveDeviceData
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_API_GetDeviceCertificate(10240, 1, NORMAL, 1 DataBuffer)
Test_CompareXMLDataBuffer(0 DataBuffer, 1 DataBuffer)=1 (S_FALSE)


' -------------------------------------------------------------------------------------------------
12446:FUNC:DRM_DDC_GetDeviceCertificate creates different (random) device keys for bin certs
' Check the binary Device certificate
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_API_GetBinaryDeviceCertificate(10240, 1, NORMAL, 0 DataBuffer)
Test_RemoveDeviceData
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_API_GetBinaryDeviceCertificate(10240, 1, NORMAL, 1 DataBuffer)
Test_CompareBinaryDataBuffer(0 DataBuffer, 1 DataBuffer)=1 (S_FALSE)


' -------------------------------------------------------------------------------------------------
11449:FUNC:DRM_DDC_GetDeviceCertificate should fail if the group cert security level is higher than the one in DAC
SkipTestIf(!WMDRMSupported)
Test_SetDeviceEnv(dt_badsec.dat, priv.dat, NULL, NULL, FALSE)
'Optimization: no longer check template validity on device
'Test_API_GetDeviceCertificate(10240, 1, NORMAL, 0 DataBuffer)=!S_OK
Test_API_GetDeviceCertificate(10240, 1, NORMAL, 0 DataBuffer)


' -------------------------------------------------------------------------------------------------
11450:FUNC:DRM_DDC_GetDeviceCertificate should fail if devcert template signature is broken
SkipTestIf(!WMDRMSupported)
Test_SetDeviceEnv(dt_badsign.dat, priv.dat, NULL, NULL, FALSE)
'Optimization: no longer check template validity on device
'Test_API_GetDeviceCertificate(10240, 1, NORMAL, 0 DataBuffer) = -2147172286(0X8004C042, DRM_E_INVALID_DEVCERT_TEMPLATE)
Test_API_GetDeviceCertificate(10240, 1, NORMAL, 0 DataBuffer)


' -------------------------------------------------------------------------------------------------
11452:FUNC:DRM_DDC_GetDeviceCertificate should fail if input parameters are null
SkipTestIf(!WMDRMSupported)
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_API_GetDeviceCertificate(NULL, 0, NORMAL, 0 DataBuffer)=-2147024809(0X80070057, DRM_E_INVALIDARG)
Test_API_GetDeviceCertificate(10240, 0, NULL, 0 DataBuffer)=-2147024809(0X80070057, DRM_E_INVALIDARG)


' -------------------------------------------------------------------------------------------------
12452:FUNC:DRM_DDC_GetDeviceCertificate should fail if input parameters are null with binary certs
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_API_GetBinaryDeviceCertificate(NULL, 0, NORMAL, 0 DataBuffer)=-2147024809(0X80070057, DRM_E_INVALIDARG)
Test_API_GetBinaryDeviceCertificate(NULL, 1, NORMAL, 0 DataBuffer)=-2147024809(0X80070057, DRM_E_INVALIDARG)
Test_API_GetBinaryDeviceCertificate(10240, 0, NULL, 0 DataBuffer)=-2147024809(0X80070057, DRM_E_INVALIDARG)


' -------------------------------------------------------------------------------------------------
11453:FUNC:DRM_DDC_GetDeviceCertificate should fail to create or retrieve a cert if output buffer is not large enough
SkipTestIf(!WMDRMSupported)
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, TRUE)
Test_API_GetDeviceCertificate(2, 0, NORMAL, 0 DataBuffer)=0x8007007A DRM_E_BUFFERTOOSMALL
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_API_GetDeviceCertificate(2, 1, NORMAL, 0 DataBuffer)=0x8004C042 DRM_E_INVALID_DEVCERT_TEMPLATE


' -------------------------------------------------------------------------------------------------
12453:FUNC:DRM_DDC_GetDeviceCertificate should fail if output buffer is not large enough to hold the bin devcert
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, TRUE)
Test_API_GetBinaryDeviceCertificate(2, 0, NORMAL, 0 DataBuffer)=0x8007007A DRM_E_BUFFERTOOSMALL
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_API_GetBinaryDeviceCertificate(2, 1, NORMAL, 0 DataBuffer)=0x8007007A DRM_E_BUFFERTOOSMALL
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_API_GetBinaryDeviceCertificate(11, 1, NORMAL, 0 DataBuffer)=0x8004C042 DRM_E_INVALID_DEVCERT_TEMPLATE


' -------------------------------------------------------------------------------------------------
11454:FUNC:DRM_DDC_GetDeviceCertificate should fail if devcert does not exist and dwFlag is 0
SkipTestIf(!WMDRMSupported)
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_API_GetDeviceCertificate(10240, 0, NORMAL, 0 DataBuffer)=0X8004D503 DRM_E_KEYFILE_CERTIFICATE_CHAIN_NOT_FOUND


' -------------------------------------------------------------------------------------------------
12454:FUNC:DRM_DDC_GetDeviceCertificate should fail if bin devcert does not exist and dwFlag is 0
Test_SetDeviceEnv(devcerttemplate.dat, priv.dat, bgroupcert.dat, zgpriv.dat, FALSE)
Test_API_GetBinaryDeviceCertificate(10240, 0, NORMAL, 0 DataBuffer)=0X8004D503 DRM_E_KEYFILE_CERTIFICATE_CHAIN_NOT_FOUND

