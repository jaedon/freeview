7300:BVT: Test Drm_M2ts_Initialize and Drm_M2ts_Uninitialize
TestEncryptor_Uninitialize() = 0x80070057 DRM_E_INVALIDARG
' Specify dynamic buffer size
TestEncryptor_Init( 0 )
TestEncryptor_Uninitialize()
' Specify large buffer
TestEncryptor_Init( 5000000 )
TestEncryptor_Uninitialize()
' Trigger E_INVALIDARG from Init (need at least SIZEOF( DRM_M2TS_ENCRYPTOR_CONTEXT ) allocated) and verify Uninitialize fails accordingly
TestEncryptor_Init( 1 ) = 0x80070057 DRM_E_INVALIDARG
TestEncryptor_Uninitialize() = 0x80070057 DRM_E_INVALIDARG
' Trigger E_OUTOFMEMORY from Init (while attempting to allocate TS packets) and verify Uninitialize fails accordingly
TestEncryptor_Init( 1000 ) = 0x80000002 DRM_E_OUTOFMEMORY
TestEncryptor_Uninitialize() = 0x80070057 DRM_E_INVALIDARG


7301:BVT: Test Drm_M2TS_BSR_* the bit stream reader using a simple byte array
TestEncryptor_BinaryReader()

7302:BVT: Test Drm_M2TS_BSR_* the bit stream reader using a packet lsit
TestEncryptor_BinaryReaderWithPacketList()

7303:BVT: Test DRM_M2TS_ParseTSPacketHeader
TestEncryptor_TSPacketHeaderParser()

7304:BVT: Test DRM_M2TS_GetFreePacket
TestEncryptor_Init( 0 )
TestEncryptor_GetFreePacket(  23, eDRM_M2TS_PACKET_STATE_PENDING, "The packet data" )
TestEncryptor_GetFreePacket( 184, eDRM_M2TS_PACKET_STATE_BAD, "AAA" )
TestEncryptor_GetFreePacket( 123, eDRM_M2TS_PACKET_STATE_READY, "NNNNNNNNNNNNNNNNNNNNjjjjj" )
TestEncryptor_GetFreePacket( 184, eDRM_M2TS_PACKET_STATE_READY, "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890" )
TestEncryptor_GetFreePacket( 185, eDRM_M2TS_PACKET_STATE_READY, "123456789012345678901234567890" ) = 0X80070057 DRM_E_INVALIDARG
TestEncryptor_Uninitialize()

7305:BVT: Test DRM_M2TS_ParsePacketHeader
TestEncryptor_Init( 0 ) 
TestEncryptor_BuildPAT( FALSE, 0, 1, 5566 )
TestEncryptor_ParsePacketHeader( 0 )
TestEncryptor_VerifyPAT( 1, 5566 )
TestEncryptor_BuildPMT( FALSE, 5566, 0, 0, MPEG2_VIDEO, 2000, ES_INFO_ONE_NON_CA, MPEGA_AUDIO, 2001, ES_INFO_TWO_NON_CA )
TestEncryptor_ParsePacketHeader( 5566 )
TestEncryptor_VerifyPMT( 5566, MPEG2_VIDEO, 2000, ES_INFO_ONE_NON_CA, MPEGA_AUDIO, 2001, ES_INFO_TWO_NON_CA )
TestEncryptor_RebuildPMTPacket( 5566 )
TestEncryptor_VerifyPMTAfterRebuilt( 5566 )
TestEncryptor_Uninitialize()
TestEncryptor_Init( 0 ) 
TestEncryptor_BuildPAT( FALSE, 0, 0, 101, 1, 5000 ) ' two programs with network program that shuold be ignored
TestEncryptor_ParsePacketHeader( 0 )
TestEncryptor_VerifyPAT( 0, 101, 1, 5000 )
TestEncryptor_BuildPMT( FALSE, 5000, 0, 0, MPEG2_VIDEO, 200, ES_INFO_NONE, MPEGA_AUDIO, 201, ES_INFO_ONE_NON_CA, ADTS, 202, ES_INFO_TWO_NON_CA )
TestEncryptor_ParsePacketHeader( 5000 )
TestEncryptor_VerifyPMT( 5000, MPEG2_VIDEO, 200, ES_INFO_NONE, MPEGA_AUDIO, 201, ES_INFO_ONE_NON_CA, ADTS, 202, ES_INFO_TWO_NON_CA )
TestEncryptor_RebuildPMTPacket( 5000 )
TestEncryptor_VerifyPMTAfterRebuilt( 5000 )
TestEncryptor_Uninitialize()
TestEncryptor_Init( 0 )
TestEncryptor_BuildPAT( FALSE, 182, 1, 5000 ) ' one program which is a normal case
TestEncryptor_ParsePacketHeader( 0 )
TestEncryptor_VerifyPAT( 1, 5000 )
TestEncryptor_BuildPMT( FALSE, 5000, 180, 200, H264, 200, ES_INFO_CA_AND_CA, MPEGA_AUDIO, 201, ES_INFO_CA_AND_NON_CA, ADTS, 202, ES_INFO_CA_AND_NON_CA_AND_CA, ADTS, 203, ES_INFO_NONE )
TestEncryptor_ParsePacketHeader( 5000 )
TestEncryptor_VerifyPMT( 5000, H264, 200, ES_INFO_CA_AND_CA, MPEGA_AUDIO, 201, ES_INFO_CA_AND_NON_CA, ADTS, 202, ES_INFO_CA_AND_NON_CA_AND_CA, ADTS, 203, ES_INFO_NONE )
TestEncryptor_RebuildPMTPacket( 5000 )
TestEncryptor_VerifyPMTAfterRebuilt( 5000 )
TestEncryptor_Uninitialize()
TestEncryptor_Init( 0 )
TestEncryptor_BuildPAT( FALSE, 0, 1, 5000, 2, 6000 ) ' two programs 5000 and 6000
TestEncryptor_ParsePacketHeader( 0 )
TestEncryptor_VerifyPAT( 1, 5000, 2, 6000 )
TestEncryptor_BuildPMT( FALSE, 6000, 170, 60, DDPLUS, 200, ES_INFO_CA_AND_CA, MPEGA_AUDIO, 201, ES_INFO_CA_AND_NON_CA, ADTS, 202, ES_INFO_CA_AND_NON_CA_AND_CA, ADTS, 203, ES_INFO_NONE )
TestEncryptor_ParsePacketHeader( 6000 )
TestEncryptor_VerifyPMT( 6000, DDPLUS, 200, ES_INFO_CA_AND_CA, MPEGA_AUDIO, 201, ES_INFO_CA_AND_NON_CA, ADTS, 202, ES_INFO_CA_AND_NON_CA_AND_CA, ADTS, 203, ES_INFO_NONE )
TestEncryptor_RebuildPMTPacket( 6000 )
TestEncryptor_VerifyPMTAfterRebuilt( 6000 )
TestEncryptor_Uninitialize()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 55, 1, 256)
TestEncryptor_ParsePacketHeader( 0 )
TestEncryptor_VerifyPAT( 1, 256 )
TestEncryptor_BuildPMT( FALSE, 256, 170, 60, DDPLUS, 200, ES_INFO_CA_AND_CA, MPEGA_AUDIO, 200, ES_INFO_CA_AND_NON_CA ) ' conflict in elementary PIDs
TestEncryptor_ParsePacketHeader( 256 ) 
TestEncryptor_CheckLoggedResults( 0x8004D80F, 1 ) ' DRM_E_M2TS_STREAM_OR_PACKET_TYPE_CHANGED
TestEncryptor_Uninitialize()

7306:FUNC: Test Encrypt H264
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 0, 55, 1234 )
TestEncryptor_BuildPMT( FALSE, 1234, 60, 0, H264, 200, ES_INFO_CA_AND_CA, ADTS, 202, ES_INFO_CA_AND_NON_CA_AND_CA )
TestEncryptor_BuildH264PES( FALSE, 200, 12, H264_PES_HEADER_PTS_903060, FALSE, 3, 3, 3, NAL09, 12, NAL05, 1000, NAL06, 302, 2, NAL09, 1, NAL05, 250, 5, NAL09, 30, NAL01, 304, NAL06, 4, NAL01, 33, NLA08, 88 )
TestEncryptor_SetKeyData( gN39TmnokEW3jNqLACBxng==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_CheckECMPID( 8190 )
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 1, gN39TmnokEW3jNqLACBxng==, 1, 903060, 1, 2, 124, 896, 306, 0, FALSE, 1, gN39TmnokEW3jNqLACBxng==, 1, 903060, 1, 1, 115, 144, FALSE, 1, gN39TmnokEW3jNqLACBxng==, 1, 903060, 1, 2, 134, 208, 137, 0 )
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

7307:FUNC: Test Encrypt MPEG2 video
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, MPEG2_VIDEO, 257, ES_INFO_NONE, ADTS, 258, ES_INFO_NONE )
TestEncryptor_BuildMPEG2PES( FALSE, 257, 12, MPEG2_PES_HEADER_PTS_2648725394, FALSE, 4, 3, 00, 25, S001, 305, S002, 120, 2, B3, 1, B2, 999, 5, B3, 7, S001, 104, S002, 4, S003, 33, B2, 88, 7, 00, 1, S001, 25, S002, 26, S003, 27, B2, 300, B5, 134, S001, 700 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_CheckECMPID( 8190 )
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 2648725394, 1, 1, 32, 430, FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 2648725394, 1, 1, 1008, 0, FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 2648725394, 1, 2, 12, 152, 92, 0, FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 2648725394, 1, 2, 8, 87, 444, 702 )
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

7308:FUNC: Test Encrypt DDPlus (aka AC3)
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 0, 1, 1000 )
TestEncryptor_BuildPMT( FALSE, 1000, 0, 0, DDPLUS, 1001, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE, 1001, 0, DDPLUS_PES_HEADER_PTS_2648661236, FALSE, 4, DDPLUS_FRAME_HEADER_FS_768, 1, DDPLUS_FRAME_HEADER_FS_768, 2, DDPLUS_FRAME_HEADER_FS_768, 3, DDPLUS_FRAME_HEADER_FS_768, 4 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_CheckECMPID( 8190 )
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 4, 2648661236, 1, 1, 126, 642, 2648661236, 1, 2, 126, 642, 126, 642, 2648661236, 1, 3, 126, 642, 126, 642, 126, 642, 2648661236, 1, 4, 126, 642, 126, 642, 126, 642, 126, 642 )
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

7309:FUNC: Test Encrypt ADTS (aka AAC)
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 0, 1, 6900 )
TestEncryptor_BuildPMT( FALSE, 6900, 0, 0, ADTS, 4888, ES_INFO_CA_AND_CA )
TestEncryptor_BuildAudioPES( FALSE, 4888, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 4, ADTS_FRAME_HEADER_FS_371, 1, ADTS_FRAME_HEADER_FS_371, 2, ADTS_FRAME_HEADER_FS_371, 3, ADTS_FRAME_HEADER_FS_371, 4 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_CheckECMPID( 8190 )
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 4, 900000, 1, 1, 7, 364, 900000, 1, 2, 7, 364, 7, 364, 900000, 1, 3, 7, 364, 7, 364, 7, 364, 900000, 1, 4, 7, 364, 7, 364, 7, 364, 7, 364 )
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

7310:FUNC: Test Encrypt MEPG Audio (version 1, 2 and 2.5)
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 0, 1, 340 )
TestEncryptor_BuildPMT( FALSE, 340, 0, 0, MPEGA_AUDIO, 188, ES_INFO_CA_AND_CA )
TestEncryptor_BuildAudioPES( FALSE, 188, 0, MPEGA_PES_HEADER_PTS_2119045161, FALSE, 4, MPEGA_FRAME_HEADER_FS_417, 1, MPEGA_FRAME_HEADER_FS_417, 2, MPEGA_FRAME_HEADER_FS_417, 3, MPEGA_FRAME_HEADER_FS_417, 4 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_CheckECMPID( 8190 )
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 4, 2119045161, 1, 1, 4, 413, 2119045161, 1, 2, 4, 413, 4, 413, 2119045161, 1, 3, 4, 413, 4, 413, 4, 413, 2119045161, 1, 4, 4, 413, 4, 413, 4, 413, 4, 413 )
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

7311:FUNC: Test Encrypt MPEG2 video without encrypting audio stream
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_SetEncryptAudio( FALSE );
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, MPEG2_VIDEO, 257, ES_INFO_NONE, ADTS, 258, ES_INFO_NONE )
TestEncryptor_BuildMPEG2PES( FALSE, 257, 12, MPEG2_PES_HEADER_PTS_2648725394, FALSE, 4, 3, 00, 25, S001, 305, S002, 120, 2, B3, 1, B2, 999, 5, B3, 7, S001, 104, S002, 4, S003, 33, B2, 88, 7, 00, 1, S001, 25, S002, 26, S003, 27, B2, 300, B5, 134, S001, 700 )
TestEncryptor_BuildAudioPES( FALSE, 258, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 4, ADTS_FRAME_HEADER_FS_371, 1, ADTS_FRAME_HEADER_FS_371, 2, ADTS_FRAME_HEADER_FS_371, 3, ADTS_FRAME_HEADER_FS_371, 4 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_SetEncryptAudio( TRUE ) = DRM_E_M2TS_CANNOT_CHANGE_PARAMETER 
TestEncryptor_CheckECMPID( 8190 )
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 2648725394, 1, 1, 32, 430, FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 2648725394, 1, 1, 1008, 0, FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 2648725394, 1, 2, 12, 152, 92, 0, FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 2648725394, 1, 2, 8, 87, 444, 702 )
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

7312:FUNC: Test Encrypt MPEG2 video and ADTS audio
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_SetEncryptAudio( TRUE );
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, MPEG2_VIDEO, 257, ES_INFO_NONE, ADTS, 258, ES_INFO_NONE )
TestEncryptor_BuildMPEG2PES( FALSE, 257, 12, MPEG2_PES_HEADER_PTS_2648725394, FALSE, 4, 3, 00, 25, S001, 305, S002, 120, 2, B3, 1, B2, 999, 5, B3, 7, S001, 104, S002, 4, S003, 33, B2, 88, 7, 00, 1, S001, 25, S002, 26, S003, 27, B2, 300, B5, 134, S001, 700 )
TestEncryptor_BuildAudioPES( FALSE, 258, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 4, ADTS_FRAME_HEADER_FS_371, 1, ADTS_FRAME_HEADER_FS_371, 2, ADTS_FRAME_HEADER_FS_371, 3, ADTS_FRAME_HEADER_FS_371, 4 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_CheckECMPID( 8190 )
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 2648725394, 1, 1, 32, 430, FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 2648725394, 1, 1, 1008, 0, FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 2648725394, 1, 2, 12, 152, 92, 0, FALSE, 2, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 2648725394, 1, 2, 8, 87, 444, 702, lv4v5SzHIU+F9Z8Z++HzCQ==, 4, 900000, 1, 1, 7, 364, 900000, 1, 2, 7, 364, 7, 364, 900000, 1, 3, 7, 364, 7, 364, 7, 364, 900000, 1, 4, 7, 364, 7, 364, 7, 364, 7, 364 )
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

7313:FUNC: Test Encrypt H264 video and DDPlus
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_SetEncryptAudio( TRUE );
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, H264, 257, ES_INFO_NONE, DDPLUS, 258, ES_INFO_NONE )
TestEncryptor_BuildAudioPES( FALSE, 258, 0, DDPLUS_PES_HEADER_PTS_2648661236, FALSE, 4, DDPLUS_FRAME_HEADER_FS_768, 1, DDPLUS_FRAME_HEADER_FS_768, 2, DDPLUS_FRAME_HEADER_FS_768, 3, DDPLUS_FRAME_HEADER_FS_768, 4 )
TestEncryptor_BuildH264PES( FALSE, 257, 12, H264_PES_HEADER_PTS_903060, FALSE, 3, 3, 3, NAL09, 12, NAL05, 1000, NAL06, 302, 2, NAL09, 1, NAL05, 250, 5, NAL09, 30, NAL01, 304, NAL06, 4, NAL01, 33, NLA08, 88 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_EncryptWithMoreData(200)
TestEncryptor_CheckECMPID( 8190 )
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 2, lv4v5SzHIU+F9Z8Z++HzCQ==, 4, 2648661236, 1, 1, 126, 642, 2648661236, 1, 2, 126, 642, 126, 642, 2648661236, 1, 3, 126, 642, 126, 642, 126, 642, 2648661236, 1, 4, 126, 642, 126, 642, 126, 642, 126, 642, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 903060, 1, 2, 124, 896, 306, 0, FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 903060, 1, 1, 115, 144, FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 903060, 1, 2, 134, 208, 137, 0 )
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

7314:FUNC: Test Encrypt H264 video and MPEG Audio (conflict with default PID for ECM)
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_SetEncryptAudio( TRUE );
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, H264, 8188, ES_INFO_NONE, MPEGA_AUDIO, 8190, ES_INFO_NONE, MPEGA_AUDIO, 8189, ES_INFO_NONE, MPEGA_AUDIO, 8170, ES_INFO_NONE )
TestEncryptor_BuildH264PES( FALSE, 8188, 12, H264_PES_HEADER_PTS_903060, FALSE, 3, 3, 3, NAL09, 12, NAL05, 1000, NAL06, 302, 2, NAL09, 1, NAL05, 250, 5, NAL09, 30, NAL01, 304, NAL06, 4, NAL01, 33, NLA08, 88 )
TestEncryptor_BuildAudioPES( FALSE, 8190, 0, MPEGA_PES_HEADER_PTS_2119045161, FALSE, 4, MPEGA_FRAME_HEADER_FS_417, 1, MPEGA_FRAME_HEADER_FS_417, 2, MPEGA_FRAME_HEADER_FS_417, 3, MPEGA_FRAME_HEADER_FS_417, 4 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_EncryptWithMoreData()
TestEncryptor_CheckECMPID( 8187 )
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 903060, 1, 2, 124, 896, 306, 0, FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 903060, 1, 1, 115, 144, FALSE, 2, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 903060, 1, 2, 134, 208, 137, 0, lv4v5SzHIU+F9Z8Z++HzCQ==, 4, 2119045161, 1, 1, 4, 413, 2119045161, 1, 2, 4, 413, 4, 413, 2119045161, 1, 3, 4, 413, 4, 413, 4, 413, 2119045161, 1, 4, 4, 413, 4, 413, 4, 413, 4, 413 )
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

7315:BVT: Test packet errors and dropping PAT and PMT packets
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
' PMT appears before the PAT should be drop with DRM_E_M2TS_UNKNOWN_PACKET (0x8004D819)
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, MPEGA_AUDIO, 258, ES_INFO_NONE )
' The PAT and PMT below should be parsed without any errors
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, H264, 257, ES_INFO_NONE, MPEGA_AUDIO, 258, ES_INFO_NONE )
' Inject DRM_E_M2TS_TABLE_ID_INVALID
TestEncryptor_InjectError( 0x8004D809 ) 
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, H264, 257, ES_INFO_NONE, MPEGA_AUDIO, 258, ES_INFO_NONE )
' Inject DRM_E_M2TS_PACKET_SYNC_BYTE_INVALID
TestEncryptor_InjectError( 0x8004D80A ) 
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, H264, 257, ES_INFO_NONE, MPEGA_AUDIO, 258, ES_INFO_NONE )
' Inject DRM_E_M2TS_ADAPTATION_LENGTH_INVALID
TestEncryptor_InjectError( 0x8004D80B )
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
TestEncryptor_BuildPMT( FALSE, 256, 25, 0, H264, 257, ES_INFO_NONE )
' Inject DRM_E_M2TS_PAT_HEADER_INVALID
TestEncryptor_InjectError( 0x8004D80C ) 
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
' Inject DRM_E_M2TS_PMT_HEADER_INVALID
TestEncryptor_InjectError( 0x8004D80D ) 
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, MPEGA_AUDIO, 258, ES_INFO_NONE )
' Inject DRM_E_M2TS_NOT_UNIT_START_PACKET
TestEncryptor_InjectError( 0x8004D807 ) 
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, MPEGA_AUDIO, 258, ES_INFO_NONE )
' Inject DRM_E_M2TS_CRC_FIELD_INVALID
TestEncryptor_InjectError( 0x8004D814 ) 
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, H264, 257, ES_INFO_NONE, MPEGA_AUDIO, 258, ES_INFO_NONE )
' Inject DRM_E_M2TS_SECTION_LENGTH_INVALID
TestEncryptor_InjectError( 0x8004D824 ) 
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, H264, 257, ES_INFO_NONE, MPEGA_AUDIO, 258, ES_INFO_NONE )
' Inject DRM_E_M2TS_PROGRAM_INFO_LENGTH_INVALID
TestEncryptor_InjectError( 0x8004D825 ) 
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, H264, 257, ES_INFO_NONE, MPEGA_AUDIO, 258, ES_INFO_NONE )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_CheckLoggedResults( 0x8004D819, 1, 0x8004D809, 2, 0x8004D80A, 2, 0x8004D80B, 2, 0x8004D80C, 1, 0x8004D80D, 1, 0x8004D807, 1, 0x8004D814, 2, 0x8004D824, 2, 0x8004D825, 1 )
TestEncryptor_Uninitialize()

7316:BVT: Test generic PES errors
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, H264, 257, ES_INFO_NONE, MPEGA_AUDIO, 258, ES_INFO_NONE )
' To triggler DRM_E_M2TS_PES_START_CODE_NOT_FOUND and DRM_E_M2TS_NOT_UNIT_START_PACKET (2) error
TestEncryptor_BuildAudioPES( FALSE, 258, 0, MPEGA_PES_HEADER_NO_START_CODE, FALSE, 1, MPEGA_FRAME_HEADER_FS_417, 1 )
' To triggler DRM_E_M2TS_PES_PACKET_LENGTH_NOT_SPECIFIED error
TestEncryptor_BuildAudioPES( FALSE, 258, 0, MPEGA_PES_HEADER_NO_SECLEN, FALSE, 1, MPEGA_FRAME_HEADER_FS_417, 1 )
' To tirgger DRM_E_M2TS_PTS_NOT_EXIST and DRM_E_M2TS_NOT_UNIT_START_PACKET (2) error
TestEncryptor_BuildAudioPES( FALSE, 258, 0, MPEGA_PES_HEADER_NO_PTS, FALSE, 1, MPEGA_FRAME_HEADER_FS_417, 1 )
' To trigger DRM_E_M2TS_INCOMPLETE_PES
TestEncryptor_BuildAudioPES( TRUE, 258, 0, MPEGA_PES_HEADER_PTS_2119045161, FALSE, 1, MPEGA_FRAME_HEADER_FS_417, 1 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_CheckLoggedResults( 0x8004D80E, 1, 0x8004D802, 1, 0x8004D801, 1, 0x8004D822, 0, 0x8004D807, 4 )
TestEncryptor_Uninitialize()

7317:BVT: Test DDPlus PES with DRM_E_M2TS_DDPLUS_FORMAT_INVALID error
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, H264, 257, ES_INFO_NONE, DDPLUS, 258, ES_INFO_NONE )
' To trigger DRM_E_M2TS_DDPLUS_FORMAT_INVALID error
TestEncryptor_BuildAudioPES( FALSE, 258, 0, DDPLUS_PES_HEADER_PTS_2648661236, FALSE, 2, INVALID_DDPLUS_FRAME_HEADER_FS_768, 1, INVALID_DDPLUS_FRAME_HEADER_FS_768, 2 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_CheckLoggedResults( 0x8004D806, 2 )
TestEncryptor_Uninitialize()

7318:BVT: Test ADTS PES with DRM_E_M2TS_ADTS_FORMAT_INVALID error
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, H264, 257, ES_INFO_NONE, ADTS, 258, ES_INFO_NONE )
' To trigger DRM_E_M2TS_ADTS_FORMAT_INVALID error
TestEncryptor_BuildAudioPES( FALSE, 258, 0, ADTS_PES_HEADER_PTS_900000, TRUE, 2, INVALID_ADTS_FRAME_HEADER_FS_371, 1, ADTS_FRAME_HEADER_FS_371, 1 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_CheckLoggedResults( 0x8004D811, 1 )
TestEncryptor_Uninitialize()

7319:BVT: Test MPEG Audio PES with DRM_E_M2TS_MPEGA_FORMAT_INVALID error
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, H264, 257, ES_INFO_NONE, MPEGA_AUDIO, 258, ES_INFO_NONE )
' To trigger DRM_E_M2TS_ADTS_FORMAT_INVALID error
TestEncryptor_BuildAudioPES( FALSE, 258, 0, MPEGA_PES_HEADER_PTS_2119045161, FALSE, 1, INVALID_MPEGA_FRAME_HEADER_FS_417, 1 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_CheckLoggedResults( 0x8004D812, 1 )
TestEncryptor_Uninitialize()

7320:BVT: Test Drop Overflow Payload
TestEncryptor_Init( 0 )
TestEncryptor_DropOveflowPayload()
TestEncryptor_Uninitialize()

7321:BVT: Test Keep Overflow Payload
TestEncryptor_Init( 0 )
TestEncryptor_KeepOveflowPayload()
TestEncryptor_Uninitialize()

7322:FUNC: Test Encrypt ADTS audio with missing packets
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_SetEncryptAudio( TRUE );
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, MPEG2_VIDEO, 257, ES_INFO_NONE, ADTS, 258, ES_INFO_NONE )
TestEncryptor_BuildAudioPES( FALSE, 258, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 4, ADTS_FRAME_HEADER_FS_371, 1, ADTS_FRAME_HEADER_FS_371, 2, ADTS_FRAME_HEADER_FS_371, 3, ADTS_FRAME_HEADER_FS_371, 4 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 4, 900000, 1, 1, 7, 364, 900000, 1, 2, 7, 364, 7, 364, 900000, 1, 3, 7, 364, 7, 364, 7, 364, 900000, 1, 4, 7, 364, 7, 364, 7, 364, 7, 364 )
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

7323:FUNC: Test Encrypt MEPG Audio with missing packets
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 0, 1, 340 )
TestEncryptor_BuildPMT( FALSE, 340, 0, 0, MPEGA_AUDIO, 188, ES_INFO_CA_AND_CA )
TestEncryptor_BuildAudioPES( FALSE, 188, 0, MPEGA_PES_HEADER_PTS_2119045161, FALSE, 4, MPEGA_FRAME_HEADER_FS_417, 1, MPEGA_FRAME_HEADER_FS_417, 2, MPEGA_FRAME_HEADER_FS_417, 3, MPEGA_FRAME_HEADER_FS_417, 4 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 4, 2119045161, 1, 1, 4, 413, 2119045161, 1, 2, 4, 413, 4, 413, 2119045161, 1, 3, 4, 413, 4, 413, 4, 413, 2119045161, 1, 4, 4, 413, 4, 413, 4, 413, 4, 413 )
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

7324:FUNC: Test Encrypt H264 with missing packet (data aligned)
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 0, 55, 1234 )
TestEncryptor_BuildPMT( FALSE, 1234, 60, 0, H264, 200, ES_INFO_CA_AND_CA, ADTS, 202, ES_INFO_CA_AND_NON_CA_AND_CA )
TestEncryptor_BuildH264PES( FALSE, 200, 12, H264_PES_HEADER_PTS_903060, TRUE, 3, 3, 3, NAL09, 12, NAL05, 1000, NAL06, 302, 2, NAL09, 1, NAL05, 250, 5, NAL09, 30, NAL01, 304, NAL06, 4, NAL01, 33, NLA08, 88 )
TestEncryptor_BuildH264PES( FALSE, 200, 12, H264_PES_HEADER_PTS_903060, TRUE, 3, 3, 3, NAL09, 12, NAL05, 1000, NAL06, 302, 2, NAL09, 1, NAL05, 250, 5, NAL09, 30, NAL01, 304, NAL06, 4, NAL01, 33, NLA08, 88 )
TestEncryptor_SetKeyData( gN39TmnokEW3jNqLACBxng==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 1, gN39TmnokEW3jNqLACBxng==, 1, 903060, 1, 2, 124, 896, 306, 0, FALSE, 1, gN39TmnokEW3jNqLACBxng==, 1, 903060, 1, 1, 115, 144, FALSE, 1, gN39TmnokEW3jNqLACBxng==, 1, 903060, 1, 2, 134, 208, 137, 0, FALSE, 1, gN39TmnokEW3jNqLACBxng==, 1, 903060, 1, 2, 124, 896, 306, 0, FALSE, 1, gN39TmnokEW3jNqLACBxng==, 1, 903060, 1, 1, 115, 144, FALSE, 1, gN39TmnokEW3jNqLACBxng==, 1, 903060, 1, 2, 134, 208, 137, 0 )
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

7325:FUNC: Test Encrypt DDPlus with missing packets (data aligned and unaligned)
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 0, 1, 1000 )
TestEncryptor_BuildPMT( FALSE, 1000, 0, 0, DDPLUS, 1001, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE, 1001, 0, DDPLUS_PES_HEADER_PTS_2648661236, FALSE, 4, DDPLUS_FRAME_HEADER_FS_768, 1, DDPLUS_FRAME_HEADER_FS_768, 2, DDPLUS_FRAME_HEADER_FS_768, 3, DDPLUS_FRAME_HEADER_FS_768, 4 )
TestEncryptor_BuildAudioPES( FALSE, 1001, 0, DDPLUS_PES_HEADER_PTS_2648661236, TRUE,  2, DDPLUS_FRAME_HEADER_FS_768, 1, DDPLUS_FRAME_HEADER_FS_768, 2 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 6, 2648661236, 1, 1, 126, 642, 2648661236, 1, 2, 126, 642, 126, 642, 2648661236, 1, 3, 126, 642, 126, 642, 126, 642, 2648661236, 1, 4, 126, 642, 126, 642, 126, 642, 126, 642, 2648661236, 1, 1, 126, 642, 2648661236, 1, 2, 126, 642, 126, 642 )
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

7326:FUNC: Test Key Rotation with DDPlus
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 0, 1, 1000 )
TestEncryptor_BuildPMT( FALSE, 1000, 0, 0, DDPLUS, 1001, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE, 1001, 0, DDPLUS_PES_HEADER_PTS_2648661236, FALSE, 1, DDPLUS_FRAME_HEADER_FS_768, 25 )
TestEncryptor_BuildPMT( FALSE, 1000, 0, 0, DDPLUS, 1001, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE, 1001, 0, DDPLUS_PES_HEADER_PTS_2648661236, FALSE, 1, DDPLUS_FRAME_HEADER_FS_768, 25 )
TestEncryptor_BuildPMT( FALSE, 1000, 0, 0, DDPLUS, 1001, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE, 1001, 0, DDPLUS_PES_HEADER_PTS_2648661236, FALSE, 1, DDPLUS_FRAME_HEADER_FS_768, 25 )
TestEncryptor_BuildPMT( FALSE, 1000, 0, 0, DDPLUS, 1001, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE, 1001, 0, DDPLUS_PES_HEADER_PTS_2648661236, FALSE, 1, DDPLUS_FRAME_HEADER_FS_768, 25 )
TestEncryptor_BuildPMT( FALSE, 1000, 0, 0, DDPLUS, 1001, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE, 1001, 0, DDPLUS_PES_HEADER_PTS_2648661236, FALSE, 1, DDPLUS_FRAME_HEADER_FS_768, 25 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, KEY_ROTATION_WITH_LICENSE_IN_PRO, 1, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt( lv4v5SzHIU+F9Z8Z++HzCQ==, KEY_ROTATION_WITH_LICENSE_IN_PRO, 1, REMOTE_BOUND_SIMPLE )
TestEncryptor_ParseECM()
TestEncryptor_CheckLoggedResults( 0x8004D805, 2 ) ' DRM_E_M2TS_NEED_KEY_DATA
TestEncryptor_Uninitialize()

7327:FUNC: Test Key Rotation with ADTS
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 0, 1, 123 )
TestEncryptor_BuildPMT( FALSE, 123, 0, 0, ADTS, 456, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE,  456, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 2, ADTS_FRAME_HEADER_FS_371, 25, ADTS_FRAME_HEADER_FS_371, 25 )
TestEncryptor_BuildPMT( FALSE, 123, 0, 0, ADTS, 456, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE,  456, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 1, ADTS_FRAME_HEADER_FS_371, 25 )
TestEncryptor_BuildPMT( FALSE, 123, 0, 0, ADTS, 456, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE,  456, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 1, ADTS_FRAME_HEADER_FS_371, 25 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, KEY_ROTATION_WITH_LICENSE_IN_PRO, 1, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt( lv4v5SzHIU+F9Z8Z++HzCQ==, KEY_ROTATION_WITH_LICENSE_IN_PRO, 1, REMOTE_BOUND_SIMPLE )
TestEncryptor_ParseECM()
TestEncryptor_CheckLoggedResults( 0x8004D805, 1 ) ' DRM_E_M2TS_NEED_KEY_DATA
TestEncryptor_Uninitialize()

7328:FUNC: Test Key Rotation with ADTS with key duraton equals to 0
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 0, 1, 123 )
TestEncryptor_BuildPMT( FALSE, 123, 0, 0, ADTS, 456, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE,  456, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 2, ADTS_FRAME_HEADER_FS_371, 25, ADTS_FRAME_HEADER_FS_371, 25 )
TestEncryptor_BuildPMT( FALSE, 123, 0, 0, ADTS, 456, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE,  456, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 1, ADTS_FRAME_HEADER_FS_371, 25 )
TestEncryptor_BuildPMT( FALSE, 123, 0, 0, ADTS, 456, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE,  456, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 1, ADTS_FRAME_HEADER_FS_371, 25 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, KEY_ROTATION_WITH_LICENSE_IN_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_ParseECM()
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

7329:FUNC: Test Key Rotation with MPEGA Audio
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 0, 1, 333 )
TestEncryptor_BuildPMT( FALSE, 333, 0, 0, MPEGA_AUDIO, 188, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE, 188, 0, MPEGA_PES_HEADER_PTS_2119045161, FALSE, 2, MPEGA_FRAME_HEADER_FS_417, 35, MPEGA_FRAME_HEADER_FS_417, 15 )
TestEncryptor_BuildPMT( FALSE, 333, 0, 0, MPEGA_AUDIO, 188, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE, 188, 0, MPEGA_PES_HEADER_PTS_2119045161, FALSE, 1, MPEGA_FRAME_HEADER_FS_417, 35 )
TestEncryptor_BuildPMT( FALSE, 333, 0, 0, MPEGA_AUDIO, 188, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE, 188, 0, MPEGA_PES_HEADER_PTS_2119045161, FALSE, 1, MPEGA_FRAME_HEADER_FS_417, 35, MPEGA_FRAME_HEADER_FS_417, 15 )
TestEncryptor_BuildPMT( FALSE, 333, 0, 0, MPEGA_AUDIO, 188, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE, 188, 0, MPEGA_PES_HEADER_PTS_2119045161, FALSE, 1, MPEGA_FRAME_HEADER_FS_417, 35 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, KEY_ROTATION_WITH_LICENSE_IN_PRO, 1, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt( lv4v5SzHIU+F9Z8Z++HzCQ==, KEY_ROTATION_WITH_LICENSE_IN_PRO, 1, REMOTE_BOUND_SIMPLE )
TestEncryptor_ParseECM()
TestEncryptor_CheckLoggedResults( 0x8004D805, 2) ' DRM_E_M2TS_NEED_KEY_DATA
TestEncryptor_Uninitialize()

7330:FUNC: Test Change PMT from one PID to another and change the media types of the audio and video stream
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 15, 125, 1500 )
TestEncryptor_BuildPMT( FALSE, 1500, 60, 0, H264, 200, ES_INFO_CA_AND_CA, ADTS, 202, ES_INFO_CA_AND_NON_CA_AND_CA )
TestEncryptor_BuildH264PES( FALSE,  200, 12, H264_PES_HEADER_PTS_903060, FALSE, 3, 1, 3, NAL09, 12, NAL05, 1000, NAL06, 302 )
TestEncryptor_BuildAudioPES( FALSE, 202, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 1, ADTS_FRAME_HEADER_FS_371, 1 )
TestEncryptor_BuildPAT( FALSE, 25, 126, 0 ) ' to trigger DRM_E_M2TS_PAT_PID_IS_NOT_ZERO
TestEncryptor_BuildPAT( FALSE, 25, 126, 1501 )
TestEncryptor_BuildPMT( FALSE, 1501, 0, 0, MPEG2_VIDEO, 200, ES_INFO_NONE, MPEGA_AUDIO, 202, ES_INFO_NONE ) ' to trigger DRM_E_M2TS_STREAM_OR_PACKET_TYPE_CHANGED
TestEncryptor_BuildMPEG2PES( FALSE, 200, 12, MPEG2_PES_HEADER_PTS_2648725394, TRUE, 1, 3, 00, 25, S001, 305, S002, 120 )
TestEncryptor_BuildAudioPES( FALSE, 202, 0, MPEGA_PES_HEADER_PTS_2119045161, TRUE, 1, MPEGA_FRAME_HEADER_FS_417, 1 )
TestEncryptor_SetKeyData( gN39TmnokEW3jNqLACBxng==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 2, gN39TmnokEW3jNqLACBxng==, 1, 2648725394, 1, 1, 32, 430, gN39TmnokEW3jNqLACBxng==, 1, 2119045161, 1, 1, 4, 413 )
TestEncryptor_CheckLoggedResults( 0x8004D800, 1, 0x8004D80F, 2 )
TestEncryptor_Uninitialize()

7331:FUNC: Test Change PMT from one PID to another and the new PMT PID was originally used by an audio or video stream
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 15, 125, 1500 )
TestEncryptor_BuildPMT( FALSE, 1500, 60, 0, H264, 200, ES_INFO_CA_AND_CA, ADTS, 202, ES_INFO_CA_AND_NON_CA_AND_CA )
TestEncryptor_BuildH264PES( FALSE,  200, 12, H264_PES_HEADER_PTS_903060, FALSE, 3, 1, 3, NAL09, 12, NAL05, 1000, NAL06, 302 )
TestEncryptor_BuildAudioPES( FALSE, 202, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 1, ADTS_FRAME_HEADER_FS_371, 1 )
TestEncryptor_BuildPAT( FALSE, 25, 126, 202 )
TestEncryptor_BuildPMT( FALSE, 202, 0, 0, MPEG2_VIDEO, 200, ES_INFO_NONE, MPEGA_AUDIO, 204, ES_INFO_NONE ) ' to trigger DRM_E_M2TS_STREAM_OR_PACKET_TYPE_CHANGED
TestEncryptor_BuildMPEG2PES( FALSE, 200, 12, MPEG2_PES_HEADER_PTS_2648725394, TRUE, 1, 3, 00, 25, S001, 305, S002, 120 )
TestEncryptor_BuildAudioPES( FALSE, 204, 0, MPEGA_PES_HEADER_PTS_2119045161, TRUE, 1, MPEGA_FRAME_HEADER_FS_417, 1 )
TestEncryptor_SetKeyData( gN39TmnokEW3jNqLACBxng==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 2, gN39TmnokEW3jNqLACBxng==, 1, 2648725394, 1, 1, 32, 430, gN39TmnokEW3jNqLACBxng==, 1, 2119045161, 1, 1, 4, 413 )
TestEncryptor_CheckLoggedResults( 0x8004D80F, 2 )
TestEncryptor_Uninitialize()

7332:FUNC: Test Encrypt error conditions
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
' Expect failure due to no init (DRM_E_M2TS_CONTEXT_NOT_INITIALIZED)
TestEncryptor_Encrypt() = DRM_E_INVALIDARG 
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 0, 55, 1234 )
TestEncryptor_BuildPMT( FALSE, 1234, 60, 0, H264, 200, ES_INFO_CA_AND_CA, ADTS, 202, ES_INFO_CA_AND_NON_CA_AND_CA )
TestEncryptor_BuildH264PES( FALSE, 200, 12, H264_PES_HEADER_PTS_903060, FALSE, 3, 3, 3, NAL09, 12, NAL05, 1000, NAL06, 302, 2, NAL09, 1, NAL05, 250, 5, NAL09, 30, NAL01, 304, NAL06, 4, NAL01, 33, NLA08, 88 )
' Verify calling Encrypt before SetKeyData fails with DRM_E_M2TS_NEED_KEY_DATA
' Also verify, after calling SetKeyData, subsequent calls return DRM_S_MORE_DATA
TestEncryptor_EncryptWithMoreData( gN39TmnokEW3jNqLACBxng==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_CheckECMPID( 8190 )
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 1, gN39TmnokEW3jNqLACBxng==, 1, 903060, 1, 2, 124, 896, 306, 0, FALSE, 1, gN39TmnokEW3jNqLACBxng==, 1, 903060, 1, 1, 115, 144, FALSE, 1, gN39TmnokEW3jNqLACBxng==, 1, 903060, 1, 2, 134, 208, 137, 0 )
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

7333:FUNC: Test Encrypt DRM_E_M2TS_GET_ENCRYPTED_DATA_FIRST case
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 0, 55, 1234 )
TestEncryptor_BuildPMT( FALSE, 1234, 60, 0, H264, 200, ES_INFO_CA_AND_CA, ADTS, 202, ES_INFO_CA_AND_NON_CA_AND_CA )
TestEncryptor_BuildH264PES( FALSE, 200, 12, H264_PES_HEADER_PTS_903060, FALSE, 3, 3, 3, NAL09, 12, NAL05, 1000, NAL06, 302, 2, NAL09, 1, NAL05, 250, 5, NAL09, 30, NAL01, 304, NAL06, 4, NAL01, 33, NLA08, 88 )
TestEncryptor_SetKeyData( gN39TmnokEW3jNqLACBxng==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_InjectError( 0x8004D817L ) 'DRM_E_M2TS_GET_ENCRYPTED_DATA_FIRST
TestEncryptor_EncryptWithMoreData() 
TestEncryptor_CheckECMPID( 8190 )
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 1, gN39TmnokEW3jNqLACBxng==, 1, 903060, 1, 2, 124, 896, 306, 0, FALSE, 1, gN39TmnokEW3jNqLACBxng==, 1, 903060, 1, 1, 115, 144, FALSE, 1, gN39TmnokEW3jNqLACBxng==, 1, 903060, 1, 2, 134, 208, 137, 0 )
TestEncryptor_CheckLoggedResults( 0x8004D817L, 1 )
TestEncryptor_Uninitialize()

7334:FUNC: Test SetKeyData error conditions
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_InjectError( 0x80070057 ) 'Test inputs that return DRM_E_INVALID_ARG
TestEncryptor_SetKeyData( gN39TmnokEW3jNqLACBxng==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

7335:FUNC: Test Encrypt w/ local-bound simple license
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 0, 1, 123 )
TestEncryptor_BuildPMT( FALSE, 123, 0, 0, ADTS, 456, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE,  456, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 2, ADTS_FRAME_HEADER_FS_371, 25, ADTS_FRAME_HEADER_FS_371, 25 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, LOCAL_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_Uninitialize()

7336:FUNC: Test Encrypt w/ local-bound simple license (KR)
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 0, 1, 123 )
TestEncryptor_BuildPMT( FALSE, 123, 0, 0, ADTS, 456, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE,  456, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 2, ADTS_FRAME_HEADER_FS_371, 25, ADTS_FRAME_HEADER_FS_371, 25 )
TestEncryptor_BuildPMT( FALSE, 123, 0, 0, ADTS, 456, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE,  456, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 1, ADTS_FRAME_HEADER_FS_371, 25 )
TestEncryptor_BuildPMT( FALSE, 123, 0, 0, ADTS, 456, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE,  456, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 1, ADTS_FRAME_HEADER_FS_371, 25 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, KEY_ROTATION_WITH_LICENSE_IN_PRO, 1, LOCAL_BOUND_SIMPLE )
TestEncryptor_Encrypt() = DRM_E_LICGEN_EMBED_LOCAL_LICENSE
TestEncryptor_Uninitialize()

7337:FUNC: Test Encrypt w/ local-bound root license
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 0, 1, 123 )
TestEncryptor_BuildPMT( FALSE, 123, 0, 0, ADTS, 456, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE,  456, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 2, ADTS_FRAME_HEADER_FS_371, 25, ADTS_FRAME_HEADER_FS_371, 25 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, LOCAL_BOUND_ROOT )
TestEncryptor_Encrypt() = DRM_E_LICGEN_ROOT_LICENSE_CANNOT_ENCRYPT
TestEncryptor_Uninitialize()

7338:FUNC: Test Encrypt w/ remote-bound root license
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 0, 1, 123 )
TestEncryptor_BuildPMT( FALSE, 123, 0, 0, ADTS, 456, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE,  456, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 2, ADTS_FRAME_HEADER_FS_371, 25, ADTS_FRAME_HEADER_FS_371, 25 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_ROOT )
TestEncryptor_Encrypt() = DRM_E_LICGEN_ROOT_LICENSE_CANNOT_ENCRYPT
TestEncryptor_Uninitialize()

7339:FUNC: Test Key Rotation with ADTS w/ embedded WRMHeader
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 0, 1, 123 )
TestEncryptor_BuildPMT( FALSE, 123, 0, 0, ADTS, 456, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE,  456, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 2, ADTS_FRAME_HEADER_FS_371, 25, ADTS_FRAME_HEADER_FS_371, 25 )
TestEncryptor_BuildPMT( FALSE, 123, 0, 0, ADTS, 456, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE,  456, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 1, ADTS_FRAME_HEADER_FS_371, 25 )
TestEncryptor_BuildPMT( FALSE, 123, 0, 0, ADTS, 456, ES_INFO_ONE_NON_CA )
TestEncryptor_BuildAudioPES( FALSE,  456, 0, ADTS_PES_HEADER_PTS_900000, FALSE, 1, ADTS_FRAME_HEADER_FS_371, 25 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, KEY_ROTATION_WITH_WRMHEADER_IN_PRO, 1, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt( lv4v5SzHIU+F9Z8Z++HzCQ==, KEY_ROTATION_WITH_WRMHEADER_IN_PRO, 1, REMOTE_BOUND_SIMPLE )
TestEncryptor_ParseECM()
TestEncryptor_CheckLoggedResults( 0x8004D805, 1 ) ' DRM_E_M2TS_NEED_KEY_DATA
TestEncryptor_Uninitialize()

7340:FUNC: Test Encrypt packet boundary
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_InjectDataIntoPacketsBuffer( 64 ); 'Dump 64 bytes of 0xFF into the buffer
TestEncryptor_BuildPAT( FALSE, 0, 1, 123 )
TestEncryptor_BuildPAT( FALSE, 0, 1, 123 )
TestEncryptor_Encrypt()
TestEncryptor_ClearPacketsBuffer()
TestEncryptor_BuildPAT( FALSE, 0, 1, 123 )
TestEncryptor_Encrypt()
TestEncryptor_ClearPacketsBuffer()
TestEncryptor_InjectDataIntoPacketsBuffer( 1 ) 'Dump 1 byte of 0xFF into the buffer
TestEncryptor_BuildPAT( FALSE, 0, 1, 123 )
TestEncryptor_Encrypt()
TestEncryptor_CheckLoggedResults( 0x8004D80A, 3 )
TestEncryptor_Uninitialize()

7341:FUNC: Test video PES without payload
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_BuildPAT( FALSE, 0, 55, 1234 )
TestEncryptor_BuildPMT( FALSE, 1234, 60, 0, H264, 200, ES_INFO_CA_AND_CA )
TestEncryptor_BuildH264PES( FALSE, 200, 0, H264_PES_HEADER_PTS_903060, TRUE, 3, 1, 3, NAL09, 12, NAL05, 1000, NAL06, 302 )
' Build a PES without its own payload
TestEncryptor_BuildH264PES( FALSE, 200, 0, H264_PES_HEADER_PTS_903060, FALSE, 3, 1, 1, NAL07, 161 )
TestEncryptor_BuildH264PES( FALSE, 200, 0, H264_PES_HEADER_PTS_903060, FALSE, 3, 1, 3, NAL09, 12, NAL05, 1000, NAL06, 302 )
TestEncryptor_Encrypt()
TestEncryptor_CheckECMPID( 8190 )
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 903060, 1, 2, 124, 896, 471, 0, FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 903060, 1, 2, 124, 896, 306, 0 )
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

7342:FUNC: Test Unblock an incompleted PMT packet from incoming packet list
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, MPEG2_VIDEO, 257, ES_INFO_NONE, ADTS, 258, ES_INFO_NONE )
TestEncryptor_BuildIncompletedPMT( FALSE, 256, 0, 0, MPEG2_VIDEO, 257, ES_INFO_NONE );
TestEncryptor_BuildMPEG2PES( FALSE, 257, 12, MPEG2_PES_HEADER_PTS_2648725394, FALSE, 4, 3, 00, 25, S001, 305, S002, 120, 2, B3, 1, B2, 999, 5, B3, 7, S001, 104, S002, 4, S003, 33, B2, 88, 7, 00, 1, S001, 25, S002, 26, S003, 27, B2, 300, B5, 134, S001, 700 )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_Encrypt()
TestEncryptor_CheckECMPID( 8190 )
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 2648725394, 1, 1, 32, 430, FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 2648725394, 1, 1, 1008, 0, FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 2648725394, 1, 2, 12, 152, 92, 0, FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 2648725394, 1, 2, 8, 87, 444, 702 )
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

7343:FUNC: Test Encrypt out of sync H264 video and DDPlus
TestManagerStoreRevocationPackage(FALSE,revpackage.xml)
TestPRNDCRLTimeOffset()
TestEncryptor_Init( 0 )
TestEncryptor_SetLoggingCallback()
TestEncryptor_SetEncryptAudio( TRUE )
TestEncryptor_InsertRandomBytes( abcde )
TestEncryptor_BuildPAT( FALSE, 130, 1, 256 )
TestEncryptor_InsertRandomBytes( z )
TestEncryptor_BuildPMT( FALSE, 256, 0, 0, H264, 257, ES_INFO_NONE, DDPLUS, 258, ES_INFO_NONE )
TestEncryptor_BuildAudioPES( FALSE, 258, 0, DDPLUS_PES_HEADER_PTS_2648661236, FALSE, 4, DDPLUS_FRAME_HEADER_FS_768, 1, DDPLUS_FRAME_HEADER_FS_768, 2, DDPLUS_FRAME_HEADER_FS_768, 3, DDPLUS_FRAME_HEADER_FS_768, 4 )
TestEncryptor_InsertRandomBytes( 1234567890-+=abcdefghijklmnopqrstuvwxsy )
TestEncryptor_BuildH264PES( FALSE, 257, 12, H264_PES_HEADER_PTS_903060, FALSE, 3, 3, 3, NAL09, 12, NAL05, 1000, NAL06, 302, 2, NAL09, 1, NAL05, 250, 5, NAL09, 30, NAL01, 304, NAL06, 4, NAL01, 33, NLA08, 88 )
TestEncryptor_InsertRandomBytes( 1234567890-+= )
TestEncryptor_SetKeyData( lv4v5SzHIU+F9Z8Z++HzCQ==, NO_PRO, 0, REMOTE_BOUND_SIMPLE )
TestEncryptor_EncryptWithMoreData( 50 )
TestEncryptor_CheckECMPID( 8190 )
TestEncryptor_ParseECM()
TestEncryptor_VerifyECM( FALSE, 2, lv4v5SzHIU+F9Z8Z++HzCQ==, 4, 2648661236, 1, 1, 126, 642, 2648661236, 1, 2, 126, 642, 126, 642, 2648661236, 1, 3, 126, 642, 126, 642, 126, 642, 2648661236, 1, 4, 126, 642, 126, 642, 126, 642, 126, 642, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 903060, 1, 2, 124, 896, 306, 0, FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 903060, 1, 1, 115, 144, FALSE, 1, lv4v5SzHIU+F9Z8Z++HzCQ==, 1, 903060, 1, 2, 134, 208, 137, 0 )
TestEncryptor_CheckLoggedResults()
TestEncryptor_Uninitialize()

