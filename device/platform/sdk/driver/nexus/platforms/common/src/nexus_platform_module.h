/***************************************************************************
*     (c)2004-2012 Broadcom Corporation
*
*  This program is the proprietary software of Broadcom Corporation and/or its licensors,
*  and may only be used, duplicated, modified or distributed pursuant to the terms and
*  conditions of a separate, written license agreement executed between you and Broadcom
*  (an "Authorized License").  Except as set forth in an Authorized License, Broadcom grants
*  no license (express or implied), right to use, or waiver of any kind with respect to the
*  Software, and Broadcom expressly reserves all rights in and to the Software and all
*  intellectual property rights therein.  IF YOU HAVE NO AUTHORIZED LICENSE, THEN YOU
*  HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY, AND SHOULD IMMEDIATELY
*  NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE SOFTWARE.
*
*  Except as expressly set forth in the Authorized License,
*
*  1.     This program, including its structure, sequence and organization, constitutes the valuable trade
*  secrets of Broadcom, and you shall use all reasonable efforts to protect the confidentiality thereof,
*  and to use this information only in connection with your use of Broadcom integrated circuit products.
*
*  2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
*  AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS OR
*  WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO
*  THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL IMPLIED WARRANTIES
*  OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE,
*  LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION
*  OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING OUT OF
*  USE OR PERFORMANCE OF THE SOFTWARE.
*
*  3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM OR ITS
*  LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL, INDIRECT, OR
*  EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY RELATING TO YOUR
*  USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF
*  THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF THE AMOUNT
*  ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1, WHICHEVER IS GREATER. THESE
*  LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY FAILURE OF ESSENTIAL PURPOSE OF
*  ANY LIMITED REMEDY.
*
* $brcm_Workfile: nexus_platform_module.h $
* $brcm_Revision: 25 $
* $brcm_Date: 5/16/12 11:59a $
*
* API Description:
*   API name: Platform (private)
*    Dummy module for the code generated by a proxy layer
*
* Revision History:
*
* $brcm_Log: /nexus/platforms/97400/src/nexus_platform_module.h $
* 
* 25   5/16/12 11:59a erickson
* SW7231-748: no thunks for NEXUS_BASE_ONLY
* 
* 24   5/9/12 3:19p erickson
* SW7231-748: enable platform module lock
* 
* 23   2/24/12 1:49p erickson
* SW7425-2081: add platform_cable_frontend extension
* 
* 22   5/17/11 2:15p jhaberf
* SWDTV-6928: Merge of 35233 platform code to the main
* 
* SWDTV-6928/1   5/5/11 1:52p mstefan
* SWDTV-6928: add DTV specifics
* 
* 21   3/11/11 1:05p erickson
* SW7420-1123: consolidate proxy and client overrides
*
* 20   2/22/11 4:16p gmohile
* SW7408-210 : Fix kernelmode standby
*
* 19   2/15/11 3:25p erickson
* SW7420-1491: use attr{local=true} to get rid of code duplication
*
* 18   2/8/11 10:44a erickson
* SW7420-1123: use separate #ifdef NEXUS_PROXY_THUNK_LAYER for proxy
*  thunk
*
* 17   1/31/11 4:02p erickson
* SW7420-1123: fix proxy build
*
* 16   1/19/11 12:04p erickson
* SW7420-1123: default NEXUS_MODULE_SELF in nexus_platform_module.h as
*  normal
*
* 15   12/7/10 5:47p erickson
* SW7420-1148: refactor kernel mode proxy for process isolation
*
* 14   10/1/10 2:46p gskerl
* SW7468-102: Added support for NEXUS_Platform_JoinStandby() to the 7468
*
* 13   9/30/10 11:23a erickson
* SW7420-1123: remove header file
*
* 12   9/29/10 9:33a erickson
* SW7420-1123: add linux usermode IPC
*
* 11   8/2/10 6:44p gskerl
* SW7125-237: Added NEXUS_PlatformJoinStandby API for multiprocess Nexus
*  in Active Standby mode
*
* 10   6/29/10 6:47p mward
* SW7125-497: For proper build without NEXUS_FRONTEND_PWM, build the
*  nexus_platform_frontend_power_management.c but stub API functions.
*
* 9   6/29/10 5:11p mward
* SW7125-497: Added nexus_platform_frontend_power_management.h.
*
* 8   3/19/10 10:12a erickson
* SW7405-3832: create standard method for specific
*  NEXUS_PLATFORM_VERSION. use tagged NEXUS_Platform_Init to enforce
*  binary compatibility. consolidate NEXUS_Platform_GetReleaseVersion
*  using standard macros.
*
* 7   2/4/10 4:47p jrubio
* SW7420-532: add InitStandby and UninitStanbdy functions for KernelMode
*
* 6   11/13/09 5:00p erickson
* SW7325-250: add nexus_platform_standby support
*
* 5   8/5/09 4:39p katrep
* PR56569: add nexus platfrom get sw version api
*
* 4   7/31/08 5:19p vsilyaev
* PR 45137: Initial support for multi application mode
*
* 3   1/29/08 5:55p vsilyaev
* PR 38682: Support of callbacks in the linux kernel/user proxy
*  environment
*
* 2   1/24/08 4:33p vsilyaev
* PR 38682: Improved kernel/proxy environment
*
* 1   1/18/08 1:06p vsilyaev
* PR 38682: Platform substitiute for module
*
*
***************************************************************************/
#ifndef NEXUS_PLATFORM_MODULE_H__
#define NEXUS_PLATFORM_MODULE_H__

#ifndef NEXUS_BASE_ONLY
#include "nexus_platform_thunks.h"
#endif
#include "nexus_platform.h"
#include "nexus_platform_version.h"
#include "nexus_platform_extint.h"
#include "nexus_platform_server.h"
#if NEXUS_PLATFORM_CABLE_FRONTEND_EXTENSION
#include "nexus_platform_cable_frontend.h"
#endif
#if (BCHP_CHIP==7125)
#include "nexus_platform_frontend_power_management.h"
#endif

extern NEXUS_ModuleHandle g_NEXUS_platformModule;
#define NEXUS_MODULE_SELF g_NEXUS_platformModule

/* for the following functions, the public functions (unthunked) occur in the platform's
$(B_REFSW_OS)/$(NEXUS_MODE) subdir, not in the syncthunk directory. the manually tagged version
occurs in the syncthunk dir. the platform code is free to call the syncthunk code if helpful. */
#if defined(NEXUS_PROXY_THUNK_LAYER)
#if defined(NEXUS_MODE_proxy) || defined(NEXUS_MODE_client)
/* rename following functions they need special handling in the proxy/client.
The following functions are implemented in nexus_platform_os.c. The user's call first goes there to set up local state.
From there, it may call into the thunk which proxies to the driver/server. This rename makes it possible. */
#define NEXUS_Platform_GetDefaultSettings NEXUS_Platform_GetDefaultSettings_proxy
#define NEXUS_Platform_Init_tagged  NEXUS_Platform_Init_tagged_proxy
#define NEXUS_Platform_Uninit  NEXUS_Platform_Uninit_proxy
#define NEXUS_Platform_AuthenticatedJoin NEXUS_Platform_AuthenticatedJoin_proxy
#define NEXUS_Platform_GetDefaultClientAuthenticationSettings NEXUS_Platform_GetDefaultClientAuthenticationSettings_proxy
#define NEXUS_Platform_InitStandby NEXUS_Platform_InitStandby_proxy
#define NEXUS_Platform_UninitStandby NEXUS_Platform_UninitStandby_proxy
#define NEXUS_Platform_GetDefaultStandbySettings NEXUS_Platform_GetDefaultStandbySettings_proxy
#define NEXUS_Platform_CreateHeap NEXUS_Platform_CreateHeap_proxy
#define NEXUS_Platform_DestroyHeap NEXUS_Platform_DestroyHeap_proxy
#endif
#endif

#endif /* NEXUS_PLATFORM_MODULE_H__ */
